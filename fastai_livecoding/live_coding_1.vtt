WEBVTT

00:00.000 --> 00:10.000
 Great.

00:10.000 --> 00:19.000
 All right, so let's at least get introduction. So let's say hello, hello.

00:19.000 --> 00:29.000
 I guess probably people know me. I'm Jeremy, co founder of Fast AI, and we're going to be doing a

00:29.000 --> 00:37.000
 wonderful thorough and correct walkthrough of fast AI lessons and more generally.

00:37.000 --> 00:40.000
 How to data science, I guess.

00:40.000 --> 00:43.000
 That's the plan.

00:43.000 --> 00:49.000
 And we will see who ends up being regular guests with us, but at least we have,

00:49.000 --> 00:53.000
 we have at least two regular guests, hopefully being Radak and Nick.

00:53.000 --> 01:00.000
 So Radak and Nick, do you want to say hello and introduce yourselves?

01:00.000 --> 01:02.000
 Sure.

01:02.000 --> 01:04.000
 Nick, want to go first?

01:04.000 --> 01:05.000
 Sure.

01:05.000 --> 01:07.000
 I can go first, Radak. No worries. Hi everyone. I'm Nick.

01:07.000 --> 01:12.000
 I'm friends with Jeremy. I've been involved in machine learning and deep learning over the last,

01:12.000 --> 01:17.000
 geez, long and I care to think about actually, but it's great to be here and yeah,

01:17.000 --> 01:18.000
 I'd love to help you out.

01:18.000 --> 01:23.000
 I'm looking forward to getting into it. So nice to meet you all.

01:23.000 --> 01:27.000
 And so Nick, your background is mainly trading, I guess.

01:27.000 --> 01:29.000
 Yeah, mainly quant finance.

01:29.000 --> 01:31.000
 And if you're fair to say like,

01:31.000 --> 01:33.000
 you're extremely,

01:33.000 --> 01:40.000
 you're extremely good coder, but you haven't had as much experience with deep learning using Python,

01:40.000 --> 01:44.000
 like you said, mainly from what I've seen you used a Wolf room quite a lot.

01:44.000 --> 01:45.000
 Yeah, exactly.

01:45.000 --> 01:47.000
 Technical background.

01:47.000 --> 01:55.000
 Yeah, so I, I, I, I suppose I'm a one trick pony in one sense in machine learning and deep learning and that it's,

01:55.000 --> 02:01.000
 it's usually been pretty heavily tabular data and financial data and some other bits and pieces along the way.

02:01.000 --> 02:06.000
 Yeah, I've always coded in, in R and less so in Python.

02:06.000 --> 02:14.000
 So it's a transition to me. So I'm learning stuff along the way here too. And especially we've come into these frameworks like fast AI, like I'm,

02:14.000 --> 02:20.000
 making my way around them, just like the rest of you are, but it's, it's fantastic to be here and I'm glad to be on the journey with all of you.

02:20.000 --> 02:22.000
 Awesome.

02:22.000 --> 02:24.000
 Hello everyone.

02:24.000 --> 02:28.000
 My name is Badik and super happy to be here.

02:28.000 --> 02:34.000
 So I guess I was trying to learn machine learning quite a while.

02:34.000 --> 02:46.000
 And then I did a past AI course, which was four years ago, and it changed everything for me and I have been doing past AI courses ever since.

02:46.000 --> 02:51.000
 Hoping to contribute in whatever way I can.

02:51.000 --> 03:03.000
 And just because the home of global AI is clearly in Queensland, Redick and Nick and I all happen to be in Queensland within within about an hour's drive of each other.

03:03.000 --> 03:05.000
 Yeah.

03:05.000 --> 03:07.000
 Absolutely.

03:07.000 --> 03:21.000
 I'm going to take it to interesting places because, if it weren't for AI, I wouldn't be able to be here. So that's, that's quite fun. You normally don't expect that to happen when you take an online course.

03:21.000 --> 03:26.000
 But hey, fast AI is the Nick in my way.

03:26.000 --> 03:38.000
 So I thought we should start at step 0.1, which is making sure that we've got Python working.

03:38.000 --> 03:42.000
 And not just working but working well.

03:42.000 --> 03:56.000
 So these sessions are not going to be about showing options for things, but showing you the one true way, which by which I mean, of course, the way I do it.

03:56.000 --> 03:59.000
 Having said that, I do actually try a lot of things.

03:59.000 --> 04:17.000
 I am totally addicted to trying out software libraries and tools and configurations or whatever and I've been doing that for 25 years. So I have actually more than 25 years.

04:17.000 --> 04:23.000
 So yeah, I, you know, I find a lot of people on the forums.

04:23.000 --> 04:34.000
 Watch your fast AI course and then go and have this conversation about like how to set something up. Nobody actually seems to just set it up the way I said just do it like this. And when I say like, no, actually do it what I said.

04:34.000 --> 04:42.000
 And then people are like, Oh, wow, that does actually work. So, before you get into complicated things you read about in the blog somewhere.

04:42.000 --> 04:50.000
 Just do this, and you're going to see me do it from scratch. So you'll see it really does work.

04:50.000 --> 05:13.000
 And one of the things we're going to be doing a lot is using a terminal, which a terminal looks like this, which is not the most exciting looking thing. And, you know, I started out, not back in, you know, 30 years ago, not using a terminal much at all.

05:13.000 --> 05:28.000
 And then you can see that there's all kind of Excel, VB, whatever. And those are all very useful tools. But the terminal is great for data scientists because rather than having to have a like a long list of click here, click next, minimize that, click their

05:28.000 --> 05:42.000
 drag here. You put it in a little script and you just say run the script, you know, you can do things very quickly. You can automate things. It's like, it's also like the difference between me speaking to you with with English language versus me

05:42.000 --> 05:54.000
 and languages and kind of diagrams or hand signals, you know, language is a really powerful way to communicate with the human and also with a machine.

05:54.000 --> 06:05.000
 So there's a reason we're going to be using the terminal. A lot of the things we do, there will be gooey ways of doing it as well. But because this is the opinionated do it my way version.

06:05.000 --> 06:22.000
 So I'm going to be talking about what we're going to be spending a lot of time on. And I want to like assume nothing except that you like know how to use a computer and you know the basics of Python.

06:22.000 --> 06:33.000
 That's hard for me because I've been using terminals and Python and stuff for a long time. So I'm highly reliant on people asking questions.

06:33.000 --> 06:47.000
 I'm very appreciative people ask questions here in zoom directly on audio, if possible. Otherwise, on YouTube live.

06:47.000 --> 06:54.000
 Don't use the zoom chat because it's a little bit harder for me to like zip in and out of.

06:54.000 --> 07:09.000
 Yeah, before I get started anything particularly Nick and Radik that you were hoping to get out of these sessions or to share in these sessions I know Radik you were interested in learning a bit more about paper space I believe.

07:09.000 --> 07:11.000
 Yes, that's true.

07:11.000 --> 07:29.000
 I think where it fits in my stock as a data scientist, even as I use. So I'm thinking about having something that I could access in my browser without thinking about starting to any instant somewhere and.

07:29.000 --> 07:43.000
 Essentially just add a click this could be helpful, not even for doing the course but just something something useful to have so definitely looking forward to learning about how we can use paper space.

07:43.000 --> 07:56.000
 And of course Radik you're an AI expert in Nvidia so it's not like you have a shortage of GPUs you can access but they're not necessarily set up in as convenient away as you described for just jumping into a browser and starting work right.

07:56.000 --> 08:14.000
 So that's true. And I'm thinking. So, I want to use tools in a way that speeds me up, you know, I want to create an environment where I think comfortable, where I remove the tools from the equation and I can focus and bring the work.

08:14.000 --> 08:34.000
 And that not only includes work for, you know, like professional work but a big part of being a data scientist is continuing to grow your skills. So if I could be working on something and very often in data science, you know, you still have to wait for something to start

08:34.000 --> 08:49.000
 or for some calculation to compete. And in those units of time where you know it's two minutes, three minutes, ten minutes, I would jump into on to read it or, you know, would essentially waste my time and to my attention.

08:49.000 --> 09:08.000
 And if I would have a window in my browser, a tab, I could jump and do something useful to something exciting like for example, submitting to a Kaggle competition or trying out a new library. I think that would be a really really nice outcome so I'm curious if that's that's something

09:08.000 --> 09:26.000
 that's important for sure. By the way, I can hear you okay but you're a little quiet and I don't know if you've got a headset you can use your microphone you can move or a volume control you can change or anything.

09:26.000 --> 09:29.000
 How about you, Nick.

09:29.000 --> 09:44.000
 I would reflect what Radik said straight off to that there that you want to just have as little friction as possible in your in your tool chain. And I think one of the great things about about doing these sessions is for people who, you know, it can be intimidating I think once you really start to get down into the

09:44.000 --> 09:58.000
 tool chain when you go from perhaps having tried, you know, your first notebooks on Kaggle or you've been on co lab or something else, you know, it can be intimidating to actually start getting down in the weeds of your system and getting to really know it and, and something can be so confusing, it's like I should be using

09:58.000 --> 10:17.000
 members, what's the right Python environment, all these things, and it can be intimidating to find that out so, like, not always great right. Exactly. And almost everyone is opinionated about how they want to use their tool chain for their thing but I think what I hope that everyone gets out of this is a way of

10:17.000 --> 10:31.000
 is a way of, as you said, there's a canonical fast AI way of doing things and, and to be able to have a tool chain that says as friction free as possible so that he get productive with whatever task in your general compute environment.

10:31.000 --> 10:43.000
 I think that's fantastic. And yeah, look forward to anybody else listening or on YouTube live want to say what you're hoping to get out of this.

10:43.000 --> 10:48.000
 Hello, everyone. My name is Ashi. Hi Ashi.

10:48.000 --> 10:55.000
 Trying to switch online video. Can you guys see me now. Sure can. Where are you joining from Ashi. I'm in Brisbane.

10:55.000 --> 10:57.000
 Oh, yes.

10:57.000 --> 10:58.000
 Yes.

10:58.000 --> 11:01.000
 You're you're working in Brisbane or student.

11:01.000 --> 11:05.000
 Yeah, so I'm working as a graduate data scientist at Rio Tinto.

11:05.000 --> 11:10.000
 And it's so happened that today I don't have any meetings so it's like, this is good.

11:10.000 --> 11:27.000
 I'll join in here. Yeah, and I can totally reflect on what Nick and Radik said about being as about having as little friction as possible because like since I'm a graduate data scientist, I'm just starting my journey as a data scientist

11:27.000 --> 11:31.000
 so trying to become a data scientist is what how I describe myself.

11:31.000 --> 11:49.000
 And most of the times the problem that arises are just conflicts and libraries. And I want to do data science but I still end up doing that lots of data engineering stuff and realize which is good to realize that you're learning, you're like

11:49.000 --> 12:00.000
 learning what a data engineering role or that sort of thing what they do and help us in getting our environment set up, which is good to learn that they do a lot of stuff and have future respect for the data engineers at least.

12:00.000 --> 12:13.000
 At Rio now, but also learning that it's a good thing to, you know, what my interest line was, it just data science and I would like to do that so that's something I'm looking forward to as well.

12:13.000 --> 12:14.000
 Great.

12:14.000 --> 12:29.000
 Yeah, I mean, there's a lot of stuff I think we need to really dig into over the coming weeks, you know, and it needs to include stuff like, you know, SQL and, you know, working with CSV files and all this stuff and it's good that all of you have talked about.

12:29.000 --> 12:44.000
 And then kind of decreasing the friction of data science because it's not just about doing it more quickly but if you have a lower friction, then it's less cognitive overhead for your brain and thinking about the process, which means there's more room for your brain to think about solving the problem.

12:44.000 --> 12:46.000
 Yeah, absolutely.

12:46.000 --> 12:48.000
 Okay, anybody else.

12:48.000 --> 12:50.000
 Yeah, Jeremy on.

12:50.000 --> 12:54.000
 I'm just really enjoying the narrative.

12:54.000 --> 13:03.000
 Also I'm hoping all the other tune into the environment, by the end of it so,

13:03.000 --> 13:07.000
 we're joining from.

13:07.000 --> 13:14.000
 I've had a bit of a trial with a paper space but I finally got that going after about what's this five weeks.

13:14.000 --> 13:22.000
 And so anyway, that's sent me back a bit but so I'm really grateful that you're running these these additional issues.

13:22.000 --> 13:32.000
 I'm going to quickly introduce yourself. Who are you and where are you joining from me. I'm a TUT in Brisbane.

13:32.000 --> 13:37.000
 And I'm late entry PhD student, and it's becoming the end of that.

13:37.000 --> 13:43.000
 In fact, I saw you at the SDM when you presented them.

13:43.000 --> 13:44.000
 Great.

13:44.000 --> 13:58.000
 Daniel, according to what I'm playing in the decomposition of heterogeneous data into a module sections and then using that for modeling of simulation.

13:58.000 --> 13:59.000
 Oh, interesting.

13:59.000 --> 14:00.000
 Great.

14:00.000 --> 14:01.000
 All right.

14:01.000 --> 14:07.000
 Well, let's, let's, let's make a start then so I'm.

14:07.000 --> 14:24.000
 Yeah, so please just dive in any time. I do recommend if you're planning to join, you know, on a regular basis. The best thing to do is to get a headset with a boom, like I have here and like I see Nick has there and then you don't even have to worry about muting yourself,

14:24.000 --> 14:32.000
 especially if it's a noise canceling headphone because you can then just chat anytime.

14:32.000 --> 14:42.000
 Yeah. And as I said, just don't feel like you have to wait for the right moment. Just jump in and treat this like a conversation.

14:42.000 --> 14:54.000
 Especially if I kind of like do something that you're like, what did Jeremy just do? Or I talk about something as if everybody knows about it and you're like, I don't know what that is like, please ask.

14:54.000 --> 15:10.000
 So, so step one to working with the terminal is is running a terminal on your computer. So, I guess, you know, people here hopefully either have the Mac or windows or Linux. If you have a Chromebook, things are a bit difficult.

15:10.000 --> 15:21.000
 And so I would suggest trying not to use a Chromebook. Right. If you're on a Mac to start your terminal just if you Google for Mac OS terminal Apple will tell you what to do.

15:21.000 --> 15:29.000
 You can use command space type terminal, you can click launch pad type terminal or in the photo.

15:29.000 --> 15:38.000
 You'll see lots of conversations online about all the different terminals you can download and use as you'll see it really doesn't matter. Okay, so just use the one you've got.

15:38.000 --> 15:45.000
 If you're on Linux, you probably already know how to use the terminal. If you're on Windows.

15:45.000 --> 15:55.000
 Now has a terminal as well. So if you just go to Microsoft store and type terminal, it'll download that for free. Okay, so what's the terminal.

15:55.000 --> 16:09.000
 A terminal is strictly speaking, you know, it's a program looking like this that knows how to display a console window or a shell window.

16:09.000 --> 16:17.000
 Now the thing inside it with a flashing cursor and these words and stuff is not strictly part of the terminal. Right. That's something called a shell.

16:17.000 --> 16:29.000
 So this thing called the Windows terminal can start a number of different shells. It can start a shell called power shell and so forth. So there's two different things. There's a thing called the shell. There's a thing called the terminal.

16:29.000 --> 16:41.000
 We often use them a little bit interchangeably and that's fine. But the first time you start the Windows terminal, it's actually going to start something called power shell, which looks like this.

16:41.000 --> 16:51.000
 So if you're running Windows, the next thing you need to do is type WSL install, which stands for Windows Subsystem for Linux.

16:51.000 --> 17:04.000
 And nowadays in Windows, it's a single line. You just type WSL dash dash install and it says do that in administrator power shell. So if you type start power shell, run as administrator.

17:04.000 --> 17:06.000
 Right.

17:06.000 --> 17:17.000
 And then you can copy and paste that into the window and then reboot when it's done. And then you'll have actually an entire copy of a Linux distribution called Ubuntu running inside Windows.

17:17.000 --> 17:21.000
 And that's what I recommend for Windows users.

17:21.000 --> 17:39.000
 Okay. So once you've done that, you should now find that you can go click here and go Ubuntu rather than power shell. And one of the things I like to do is to get all of my tools working so that they do what I want kind of automatically each time.

17:39.000 --> 17:52.000
 So I don't use power shell very much. I mainly use Ubuntu as I expect you will be, especially for this course. So if you go into settings, you can choose the default profile as being Ubuntu.

17:52.000 --> 18:08.000
 And then next time you open it, it will do Ubuntu by default. Okay. So first time you run it, it'll ask you to choose a username and a password. That's because this is a whole separate operating system.

18:08.000 --> 18:21.000
 So I've actually set up a new user.

18:21.000 --> 18:27.000
 Totally empty. So I've got an empty, I'm going to start with a totally empty kind of virtual machine here.

18:27.000 --> 18:46.000
 Okay. And then, you know, the other thing I think's a good idea is to kind of give your terminal a full screen. So on Windows, for example, if you hit Windows tab, you have the ability to kind of move things around.

18:46.000 --> 18:53.000
 And if you hit alt enter, you'll get a full screen. So now I've got lots of room for working with my terminal.

18:53.000 --> 19:02.000
 So I'm not sure for whatever terminal you use on Linux or Mac, what the equivalent keyboard shortcuts are, but Google for keyboard shortcut.

19:02.000 --> 19:16.000
 Mac terminal full screen or something and virtual these different when these different like separate kind of virtual windows are called virtual desktops. Very good idea to learn to use virtual desktops.

19:16.000 --> 19:28.000
 Okay. So this is here we are in a terminal and we're going to, we're going to set up Python. Now the first thing to do in your terminal is to type Python.

19:28.000 --> 19:37.000
 And this is bad. I typed Python and something happened. I didn't want something to happen.

19:37.000 --> 19:47.000
 And because we actually want to install our own version of Python. And so if you type something happens, that means you've already got a version and we definitely don't want to use it.

19:47.000 --> 19:56.000
 And the reason for that is that the version that you're going to see by default is going to be what's called the system Python. It's the Python that your computer uses for like running stuff.

19:56.000 --> 19:59.000
 We want to put in a separate version of Python.

19:59.000 --> 20:11.000
 So when I type a command like Python, what it's actually doing is it's finding this somewhere on your hard drive and running that program and you actually want to know which one is it running.

20:11.000 --> 20:21.000
 And so you can type which followed by the thing that you want to run Python, and it's going to tell you this is running from something called slash user slash bin slash Python.

20:21.000 --> 20:30.000
 Now on the other hand, the user I created, which is called JPH 00. If I want to find out where I am right now.

20:30.000 --> 20:46.000
 I can type print working directory Pw he so this is idea of like directories which hopefully you're kind of somewhat familiar with from using like, you know, the finder or, or explorer or whatever.

20:46.000 --> 20:55.000
 So on your computer, you know there's some directory that you're in in finder or explorer and that you're seeing the contents of it.

20:55.000 --> 21:03.000
 And you can kind of move up and down and move around and there's kind of a concept of a current directory you're in.

21:03.000 --> 21:06.000
 So in the terminal exactly the same.

21:06.000 --> 21:09.000
 There's a concept of what directory I'm in.

21:09.000 --> 21:17.000
 So it's a Pw D it tells you what directory you're in so currently I'm in a directory called slash home slash JPH 00.

21:17.000 --> 21:21.000
 So on.

21:21.000 --> 21:29.000
 All of the operating systems we're talking about today. I believe there's the same idea actually I don't know if this is John Mack there's an idea of a home.

21:29.000 --> 21:36.000
 Radick or Nikki you guys Mack users. If you go to terminal and type pw du do you do you end up in some kind of home directory.

21:36.000 --> 21:41.000
 You do by default in Mack. Yeah, okay, and that'll be like slash home slash Nick or whatever.

21:41.000 --> 21:42.000
 Correct.

21:42.000 --> 21:44.000
 Yeah, I'm slash your system username.

21:44.000 --> 21:49.000
 Great. So all the same terrific.

21:49.000 --> 21:55.000
 So generally speaking, we want to install everything into our home directory.

21:55.000 --> 22:02.000
 We don't want to be using any versions of Python or anything that are in anywhere else such as this system directory.

22:02.000 --> 22:08.000
 So let's go ahead and install our own version of Python we can use.

22:08.000 --> 22:25.000
 And there is one and only one correct answer at the moment in my opinion to what should I install which is to install some kind of anaconda distribution so Python isn't open source program lots of different people packaged up for your computer.

22:25.000 --> 22:34.000
 Which, which Python you install is going to make a huge difference to how easy everything is.

22:34.000 --> 22:37.000
 Yeah, may I ask a question please.

22:37.000 --> 22:40.000
 Yeah, are you using windows 11 or windows 10.

22:40.000 --> 22:42.000
 I'm using windows 11.

22:42.000 --> 22:49.000
 I think they're almost exactly the same. I actually don't like it quite as much as windows 10 to be honest about to force everybody to upgrade anyways.

22:49.000 --> 22:56.000
 I just did the bullet.

22:56.000 --> 23:05.000
 Sorry, tell me again what's the difference with the WSL install. I guess under 10 you have to specify WSL to instead of something.

23:05.000 --> 23:12.000
 I would suggest a good reason for installing. Yeah, I do think windows 11 that the WSL stories a little easier.

23:12.000 --> 23:25.000
 So that's probably one reason to upgrade. Also, if you do have an embedded GPU in your laptop like I do, it's much easier to use it in WSL.

23:25.000 --> 23:27.000
 If you use windows 11.

23:27.000 --> 23:35.000
 Okay, so the particular distribution I strongly recommend using is called.

23:35.000 --> 23:43.000
 Mini forge. Sorry, not actually, we're not going to use me for to use member forge. I always get confused.

23:43.000 --> 23:47.000
 And forge.

23:47.000 --> 23:52.000
 So let's go ahead and install it.

23:52.000 --> 24:01.000
 So if we scroll down, we'll find installers for many forge keeps scrolling down. Many forge. I pay three is quick run it out here.

24:01.000 --> 24:11.000
 Okay.

24:11.000 --> 24:21.000
 Oops. So I'm going to try to remember to put stuff in here as we go.

24:21.000 --> 24:29.000
 So, I'm going to try to remember forge installer.

24:29.000 --> 24:37.000
 Save.

24:37.000 --> 24:41.000
 All right.

24:41.000 --> 24:47.000
 So, um, let's do everything through the terminal. I think it makes life easier. So not pi pi three just member for tonight member for so we'll find.

24:47.000 --> 24:57.000
 So I know I'm on windows, but I'm using WSL. So that means I'm effectively I'm Linux. And I've got a most computers, a m d 64, unless you're on a Mac.

24:57.000 --> 25:02.000
 So I'll right click on this and I'm going to choose copy address.

25:02.000 --> 25:12.000
 Okay, let's go back to our terminal. So in our terminal, you know, just like in find or explore, it's good to keep things nicely organized. So let's create a directory to put things we download into.

25:12.000 --> 25:19.000
 So to create a directory, we type mukder, make a directory, and then we'll call downloads.

25:19.000 --> 25:29.000
 So if I now list the directory that shows me all LS shows me all of the things that are in this directory. And so I've now got something called downloads.

25:29.000 --> 25:38.000
 So to make that the current directory, I changed directory CD into it. Now typing downloads takes far too long.

25:38.000 --> 25:45.000
 So instead I'll just type the first couple of letters and then hit the tab key on my keyboard. And it fills it out for me.

25:45.000 --> 25:52.000
 So the tab key is very helpful for you to use in in your shell in your terminal.

25:52.000 --> 26:02.000
 So we need some way in the terminal of downloading a file and the main one I recommend using is called W get.

26:02.000 --> 26:14.000
 So W get gets a URL and make sure you know how to paste things into your terminal.

26:14.000 --> 26:28.000
 So I try to remember I think there's some things you can fit around with.

26:28.000 --> 26:37.000
 Oh, maybe it's just a default. So in I think maybe it's a default in in WSL's in Windows terminal you hit Ctrl Shift V to paste.

26:37.000 --> 26:40.000
 So there's the thing that I just copied the URL.

26:40.000 --> 26:47.000
 So if I hit enter now, it's going to go ahead and download that for me.

26:47.000 --> 26:57.000
 There we go. Okay. Now, with data science, you spend a lot of time waiting for things.

26:57.000 --> 27:03.000
 And so don't spend time waiting for things like downloads. Do something else at the same time.

27:03.000 --> 27:11.000
 So you'll see here there's a little plus sign that lets me create another window or I can use Ctrl Shift one.

27:11.000 --> 27:15.000
 Now I strongly recommend using keyboard shortcuts wherever possible.

27:15.000 --> 27:23.000
 So if I hit Ctrl Shift one, I've now got a second terminal running and I can Ctrl Tab between them.

27:23.000 --> 27:31.000
 And so now we can click doing things where that's happening.

27:31.000 --> 27:34.000
 I'm going to switch to my fresh new user. Okay.

27:34.000 --> 27:47.000
 So, so while that's happening, let's talk about if you've tried to install Python before and you've got a million different versions of things that can get really confusing.

27:47.000 --> 27:53.000
 So I strongly recommend trying to clear everything away and starting from scratch.

27:53.000 --> 27:56.000
 So the first thing is if you're in your home directory.

27:56.000 --> 27:59.000
 So if you see this little tilde here, that means I'm in my home directory.

27:59.000 --> 28:09.000
 So although my working directory is slash home slash JPHO on Linux and on Mac, most shells, the shortcut for your home directory is just to call it tilde.

28:09.000 --> 28:20.000
 So if you're in a CD into downloads change directory into downloads, it says you are now in tilde slash downloads. So it's a shorthand way of saying slash home says JPHO zero zero slash downloads.

28:20.000 --> 28:21.000
 Okay.

28:21.000 --> 28:29.000
 If you've got any other anaconda mini conda mini forge whatever here right now.

28:29.000 --> 28:31.000
 Delete it.

28:31.000 --> 28:35.000
 And so, let's see you've got a mini kind of for example.

28:35.000 --> 28:53.000
 So, let's see if you can just move it out of the way. If you're worried you might lose something important. So to move something you type mv remove, move many kinder to call it like many kinder dot old say and that now is going to get out of the way it's not

28:53.000 --> 29:01.000
 going to interfere with anything so either remove or move out of the way any existing installations.

29:01.000 --> 29:05.000
 So, I'm going to make sure is you don't have any.

29:05.000 --> 29:10.000
 We don't have voice of jerem. Sorry.

29:10.000 --> 29:13.000
 We had interruption I think.

29:13.000 --> 29:17.000
 Oh, you lost me for a bit.

29:17.000 --> 29:19.000
 Can you hear me now.

29:19.000 --> 29:21.000
 Yes, it's working now.

29:21.000 --> 29:24.000
 Okay, how long did you lose me for.

29:24.000 --> 29:31.000
 Oh, just five seconds. Okay. Thanks for letting me know.

29:31.000 --> 29:36.000
 Okay, so.

29:36.000 --> 29:50.000
 As well as making sure that you don't have any other copies of anaconda or mini conda or mini forge lying around. You also want to make sure you don't have any copies of Jupiter installed or anything like that installed in your system Python.

29:50.000 --> 29:54.000
 So if you type I Python.

29:54.000 --> 29:58.000
 You want nothing to happen that this is what you want or if you type Jupiter.

29:58.000 --> 30:02.000
 You want nothing to happen. Okay, if something is happening.

30:02.000 --> 30:11.000
 Right, then try typing pip uninstall, for example, I Python and Jupiter.

30:11.000 --> 30:21.000
 I try to uninstall all the copies of this stuff. You don't want them in your system.

30:21.000 --> 30:24.000
 It's going to make things very, very confusing.

30:24.000 --> 30:34.000
 If you can't uninstall things no matter how hard you try, then find out where that is. So, for example, type which Jupiter, right? And if you've got it installed, it'll tell you, since, slash, user slash, be in slash Jupiter or whatever, and deleted.

30:34.000 --> 30:48.000
 So to delete things to delete a directory and all of its contents. This is obviously very dangerous to be careful. You don't delete something you don't want to R M for remove minus R means recursively so all folders and files underneath it.

30:48.000 --> 30:52.000
 F for force. So do this without asking.

30:52.000 --> 30:55.000
 Many kind of old, for example.

30:55.000 --> 31:05.000
 And you could do something similar if you had a slash user slash bin slash Jupiter, for example, you could type R M slash user slash bin slash Jupiter, and that would get rid of it.

31:05.000 --> 31:10.000
 So you want it to be at a point where, yeah.

31:10.000 --> 31:13.000
 You don't have I Python. You don't have Jupiter.

31:13.000 --> 31:20.000
 And you've downloaded. You don't have any kind of directories in your home directory.

31:20.000 --> 31:22.000
 And you've downloaded.

31:22.000 --> 31:25.000
 And you can do that.

31:25.000 --> 31:27.000
 All right.

31:27.000 --> 31:32.000
 Any questions or comments so far.

31:32.000 --> 31:41.000
 If you're trying to follow along and something weird happens, feel free to let us know. You're welcome to share a screen, you know, debugging will help you.

31:41.000 --> 31:42.000
 Yeah.

31:42.000 --> 31:44.000
 You can see me. Hopefully you can.

31:44.000 --> 31:46.000
 I'm Rob. I'm down in Hobart.

31:46.000 --> 31:47.000
 Hi, Robin Hobart.

31:47.000 --> 31:48.000
 I love that.

31:48.000 --> 31:53.000
 Great place. It's just got above 11 degrees outside.

31:53.000 --> 31:56.000
 I'm going to play a Royal tennis. If you have.

31:56.000 --> 31:57.000
 Oh, yeah.

31:57.000 --> 32:00.000
 Yeah, I know the tennis club there. Yeah, beautiful.

32:00.000 --> 32:02.000
 Anyway, I work for the Bureau meteorology.

32:02.000 --> 32:06.000
 There's a bit of background, but you're the guy that did the clouds to tech.

32:06.000 --> 32:08.000
 Yeah, that's me. Yeah. Yeah.

32:08.000 --> 32:10.000
 That was fun.

32:10.000 --> 32:15.000
 I have a quick question. Would you mind talking a little bit about Konda versus Mamba.

32:15.000 --> 32:18.000
 Yeah, we're going to do that now. So, absolutely.

32:18.000 --> 32:23.000
 Sorry, please. Anytime jump in.

32:23.000 --> 32:28.000
 All right. So let's just get this installed, first of all. So.

32:28.000 --> 32:35.000
 We've got, okay. So we've learned that LS lists the directory that we're in right now.

32:35.000 --> 32:38.000
 And LS minus L.

32:38.000 --> 32:44.000
 And that gives is like L for long form gives you more information about each thing.

32:44.000 --> 32:46.000
 And so long form.

32:46.000 --> 32:50.000
 It tells me how big it is. Now, that's quite hard to read. So another really helpful.

32:50.000 --> 32:56.000
 These are called flags really helpful flag is minus L minus H H just for human readable.

32:56.000 --> 33:01.000
 89 big. And when you pass multiple flags to a program like this,

33:01.000 --> 33:05.000
 you don't actually have to put them each with a dash. You can just put them next to each other.

33:05.000 --> 33:10.000
 And this is L H is the same as minus L minus H. So this is list long form human readable.

33:10.000 --> 33:13.000
 So we just downloaded an 89 megabyte file.

33:13.000 --> 33:22.000
 And this is a dot SH file. A dot SH file is a script. It's something that it's basically a shell script.

33:22.000 --> 33:29.000
 It's a list of shell commands like LS or CD or which that are listed in order one after another in a text file.

33:29.000 --> 33:36.000
 So you can look at a text file by typing less and then the name of the file to look at now.

33:36.000 --> 33:41.000
 I'm going to take capital MA. I'm not going to type all this out because I'm lazy. I just hit tab.

33:41.000 --> 33:46.000
 And then I press enter. And so you can see this is what a script looks like.

33:46.000 --> 33:50.000
 Anything starting with a hash sign is a comment. So it doesn't do anything.

33:50.000 --> 33:57.000
 And then everything else is literally the shells is going to go through each of these lines one at a time and run them in your terminal.

33:57.000 --> 34:01.000
 And so this is the thing that installs and before.

34:01.000 --> 34:05.000
 So to run a script, there's a few ways to do it.

34:05.000 --> 34:11.000
 The best way to do it is to run it.

34:11.000 --> 34:17.000
 Well, there's a few ways to do it. I think the way they suggest in the docs is that you type bash space and then this.

34:17.000 --> 34:20.000
 So let's explain what's happening here.

34:20.000 --> 34:29.000
 I mentioned that inside the terminal, the thing that's like printing out this information and listening to my commands and doing stuff like LS is not the terminal itself.

34:29.000 --> 34:31.000
 Something called a shell.

34:31.000 --> 34:39.000
 And a shell is just a program that somebody wrote to, to, yeah, let me type commands and get answers and stuff like that.

34:39.000 --> 34:51.000
 The shell that you're going to use as by default is called bash and the shell that Linux, most Linux is used by default is also called bash.

34:51.000 --> 34:56.000
 The shell that Mac uses by default is called zsh.

34:56.000 --> 34:58.000
 They're so similar.

34:58.000 --> 35:00.000
 My suggestion is just don't worry about it. Like you're fine.

35:00.000 --> 35:07.000
 Basically, almost everything. I think everything we see today if you use a Mac will work just as well with bash.

35:07.000 --> 35:13.000
 So it's like a pretty safe thing to run scripts with. So if you type bash space.

35:13.000 --> 35:18.000
 And then that it says, please run this shell script using this shell.

35:18.000 --> 35:22.000
 So it's going to run this as a bash script. So if I press enter.

35:22.000 --> 35:27.000
 Okay, so this is now running this program called man of member for two minutes.sh.

35:27.000 --> 35:31.000
 So please review the license agreement, of course.

35:31.000 --> 35:35.000
 Do I accept the license terms? I read them very carefully.

35:35.000 --> 35:39.000
 Okay, and it's going to get installed for you. So I'll just press enter.

35:39.000 --> 35:43.000
 And you'll see here it's going to install it into my home directory.

35:43.000 --> 35:46.000
 There's something called member forge.

35:46.000 --> 35:55.000
 Away it goes. Okay, so while that's happening, let's describe what's going on here. So this is installing, not just Python, but a whole bunch of libraries.

35:55.000 --> 35:59.000
 These are all the libraries that it's installing.

35:59.000 --> 36:03.000
 Okay, so it's finished. That was quick. Do you want to this to initialize it?

36:03.000 --> 36:09.000
 So the answer is yes, we do. And what that means is each time in the future that we.

36:09.000 --> 36:16.000
 Open our terminal, it's going to automatically set up our Python environment for us. I'll type yes.

36:16.000 --> 36:22.000
 There we go. So as it says, for changes to take effect, close and reopen your shell. So let's go ahead and do that.

36:22.000 --> 36:26.000
 Jeremy, I have a quick question.

36:26.000 --> 36:28.000
 Yeah.

36:28.000 --> 36:36.000
 I'm using a Mac and I went through lesson three. And I think you had covered something about installing.

36:36.000 --> 36:42.000
 Some of the software of including and then getting to the notebook.

36:42.000 --> 36:46.000
 I'm a bit confused. So you plan to doesn't apply to Mac, does it?

36:46.000 --> 36:51.000
 Everything just you've subscribed so far will work perfectly on that. Yes.

36:51.000 --> 36:58.000
 But can, should I be using the terminal directly and I do see the.

36:58.000 --> 37:01.000
 Yes, I suggest doing everything exactly as I'm showing it.

37:01.000 --> 37:04.000
 Although the Mac version of the installer.

37:04.000 --> 37:06.000
 Let's see.

37:06.000 --> 37:10.000
 The Mac installer might be not a shell script.

37:10.000 --> 37:13.000
 No, it is a shell script. Yeah. So it looks like it should work. Yeah.

37:13.000 --> 37:16.000
 I think I can confirm it is.

37:16.000 --> 37:18.000
 Great.

37:18.000 --> 37:22.000
 Yeah. So that should all work fine. If it doesn't, let us know.

37:22.000 --> 37:25.000
 But yeah, it should all all the steps should be identical.

37:25.000 --> 37:27.000
 Great. Thanks.

37:27.000 --> 37:30.000
 All right.

37:30.000 --> 37:38.000
 Okay. So I just closed and reopened my shell. So one way to do that is just to close your terminal and open the terminal again.

37:38.000 --> 37:47.000
 And my terminal now looks slightly different. It looks got the word base before it. And this is the way we can tell that we are, we have our.

37:47.000 --> 37:53.000
 Python environment running. We're inside it, if you like. So we're all set up to use Python.

37:53.000 --> 37:57.000
 So if I now type which Python.

37:57.000 --> 38:02.000
 It doesn't say slash user slash bin slash Python anymore. It actually shows me I'm in my home directory.

38:02.000 --> 38:06.000
 There's a man before directory and there's a bin slash Python there.

38:06.000 --> 38:10.000
 This is what we want. Okay. You know you've set this up correctly.

38:10.000 --> 38:20.000
 So if you type which Python and you get back and answer that's inside your home directory.

38:20.000 --> 38:28.000
 There's a number of reasons for this, but really a key one as I say is that the main alternative is that you'll be using your system Python.

38:28.000 --> 38:39.000
 That's the Python that your computer uses for like running stuff in your operating system. And that's causes all kinds of confusion with between what your computer is trying to do and what you're trying to do.

38:39.000 --> 38:45.000
 It's also super easy when you're using the one in your home directory because if anything ever goes wrong.

38:45.000 --> 38:57.000
 You just rm minus rf mamba forge and that deletes everything and this run it again and you're up and running. And you want to get to a point where you can do that.

38:57.000 --> 39:01.000
 Incredibly easily.

39:01.000 --> 39:18.000
 So let me now describe. Okay, so what I'm now going to do is I'm going to, I'm going to show you I'm going to start from scratch. Right. So currently I got that all set up. There's my man before directory created so I'm going to go rm minus rf mamba forge.

39:18.000 --> 39:19.000
 There we go.

39:19.000 --> 39:25.000
 I'm going to go to downloads and I'm going to even remove the installer we downloaded.

39:25.000 --> 39:29.000
 Okay.

39:29.000 --> 39:43.000
 And I'm going to show you how we can do all the same steps, but using a script. Oh, and also let's delete the thing that it added. Remember I said, do you want to automatically initialize mamba forge when you start your terminal.

39:43.000 --> 39:54.000
 Well, what it actually did was it edited a secret hidden file. Normally, LS doesn't show you secret hidden files, but if you add the minus a for all.

39:54.000 --> 40:05.000
 And so you can see now there's a whole bunch of files that we didn't see before anything starting with a dot is by default hidden in the shell.

40:05.000 --> 40:18.000
 And this one here called bash RC, which if you're using a Mac, we'll be called ZSHRC is a script where all the things in that are run automatically every time you run your terminal.

40:18.000 --> 40:29.000
 So if we edit that script.

40:29.000 --> 40:40.000
 Then you can see at the end of it, they've the installer is set up stuff to initialize condo. So I'm just going to delete all that so that we're really back to scratch.

40:40.000 --> 40:48.000
 So if I now close and reopen my shell.

40:48.000 --> 40:53.000
 You can see it no longer says base right so we've totally started again.

40:53.000 --> 41:01.000
 So I don't like to do anything I'm going to do more than a couple of times. I don't like to do manually. So I'd like to automate this whole thing.

41:01.000 --> 41:22.000
 So I which I have, there's a repo called fast setup, which Radik knows well because he's helped set up some of this, which contains all the things I use to like very rapidly set up everything on a on a new computer or a new server or whatever.

41:22.000 --> 41:36.000
 So I think he'll call it set up condo.

41:36.000 --> 41:50.000
 I just wanted to ask, can you come in a little bit better now. I switched to a microphone. Oh, so much. You sound great. Wonderful. Wonderful. So now that you can hear me if I could maybe make one tiny comment please.

41:50.000 --> 42:07.000
 You know, with the comments like we've seen, unless that's minus a or there was another one, and the minus our flux. They often have the same unique for different programs.

42:07.000 --> 42:15.000
 So we have M V minus R that's recursive.

42:15.000 --> 42:28.000
 I don't think you actually need that for empty, but for example, with the LS, the minus H flag, you will see it across a bunch of other comments that the minus H will be human readable.

42:28.000 --> 42:43.000
 It's a, it might sound a bit overwhelming to see this flag that maybe don't seem to make that much meaning, but you will be using them across many commands and then there's also a trick to very easy to list the flag.

42:43.000 --> 43:04.000
 So, I recommend, you know, it actually gets the points straightforward. Yeah, that's a great point. Many, many programs have a special flag minus minus help, which will list for the flags, for example.

43:04.000 --> 43:09.000
 They can be a bit overwhelming because there's a lot of flags but that doesn't mean you have to know them all.

43:09.000 --> 43:19.000
 But something else which is like, you know, we're covering a lot of stuff pretty quickly and so people who haven't used a terminal before, there's going to be a lot of new information here.

43:19.000 --> 43:33.000
 Obviously, it's a good idea to watch the video afterwards, but something that would I think help a lot of people in the community would be if there are bits that you do read it once again afterwards because you want to learn that bit.

43:33.000 --> 43:49.000
 So, you know, write it down, like just write down what you know this is what Jeremy said and he has a link to the thing he was talking about, and chuck it into a blog post that would like help a lot of people, because, you know, watching a video is

43:49.000 --> 44:05.000
 a lot of time than grabbing the best of bits out of a blog post so that would be something if you're interested in both giving back to the community and documenting it for yourself.

44:05.000 --> 44:11.000
 That would be amazing. And I guess something we should probably talk about in more detail at some point is how to write a blog post.

44:11.000 --> 44:29.000
 Like a blog post or your tweets or on the forums. It has a lot of nice benefits. It's not only that you're helping others but you're also remembering the stuff better or understanding this is better, when you say something in words, you know, I often find myself

44:29.000 --> 44:41.000
 to be something else and I think I understand it but it's only at the point of putting it in words that I identify gaps in my understanding. It's definitely great for remembering things.

44:41.000 --> 45:02.000
 And another effect that I still have heart and thinking that this thing but it is, you will write something and you will share it and then somebody else would read it and they will say, that's useful. This person, maybe knows about what they're talking about and

45:02.000 --> 45:20.000
 I think it's a really neat people to reach out to you asking you to collaborate or maybe even, you know, might need to professional opportunities. So it's something that's very far away from what we normally imagine that is possible.

45:20.000 --> 45:23.000
 But apparently it is a very real thing.

45:23.000 --> 45:32.000
 And I'm going to turn to you for sure. And lots of our people in our community. When I look at the most, the biggest contributors to our community.

45:32.000 --> 45:42.000
 Pretty much all of them started out without having a job in AI and pretty much all of them have jobs or research positions in AI now so probably not a coincidence.

45:42.000 --> 46:03.000
 Now this thing we're looking at right now is a Git repo in GitHub will talk more about get a lot. But for now it's enough to know that GitHub is a place that has lots and lots of coding libraries and coding tools that you can download, edit, play with, explore and so forth.

46:03.000 --> 46:16.000
 And it's very, very, very useful tool to get extremely familiar with. In this case, we want just one file from it, which is the file called setup kinder.sh which is a list of steps necessary to install.

46:16.000 --> 46:21.000
 Member forge on your computer. As you can see, it's just 28 lines. It's very short.

46:21.000 --> 46:25.000
 So how do you download a single file from GitHub.

46:25.000 --> 46:31.000
 The easiest way, in my opinion, is just to click on the file.

46:31.000 --> 46:38.000
 Click on raw, because you see at the moment it's got all this stuff around it. We just want the file itself to click on raw.

46:38.000 --> 46:45.000
 And now there's just the script. Right. And now if I click on the URL and copy it.

46:45.000 --> 46:49.000
 I can now go back here and who remembers what we typed.

46:49.000 --> 46:58.000
 W get is the way we download something. So if I typed up you get setup kinder, then that's now created.

46:58.000 --> 47:03.000
 And then I can go back here and type in the file called setup kinder, my computer.

47:03.000 --> 47:07.000
 And if I want to look at it, remember we typed less.

47:07.000 --> 47:12.000
 And there we can see there's the file. So we want to run this script.

47:12.000 --> 47:16.000
 And as you can see, a best script, a shell is a little mini programming language.

47:16.000 --> 47:21.000
 So it's got a case statement to the case that we can look at what it's going to do. Right.

47:21.000 --> 47:29.000
 And then it's going to check what kind of CPU you have and it will download the appropriate mini member forge for your environment.

47:29.000 --> 47:36.000
 And then it's going to check what shell you're using and then it's going to set up bash or zz.h or fish is appropriate.

47:36.000 --> 47:41.000
 Echo means printouts to print out downloading installer. It'll download it. Carol is just let up you get.

47:41.000 --> 47:46.000
 And that it'll run that bash thing we just saw and it'll initialize it.

47:46.000 --> 47:55.000
 There's a handy flag for the member for instance all the minus B, which is something that causes it to not ask you to check the license and stuff like that at all happens automatically.

47:55.000 --> 48:02.000
 So if I now do exactly what I did before to run my script, I could type bash setup, kinder dot sh that would work.

48:02.000 --> 48:08.000
 But another thing we can do is the very first file here.

48:08.000 --> 48:20.000
 Hash exclamation mark, blah, blah, blah, blah. This tells our computer how to run this script that says to run it with bash.

48:20.000 --> 48:25.000
 So we actually don't need to say bash, then that we can just run it directly.

48:25.000 --> 48:34.000
 So we could try doing that set up dash condo dot sh with a dot slash this means in the current directory.

48:34.000 --> 48:48.000
 And that doesn't work. And the reason that doesn't work is because by default things you download from the Internet, you can't just run your computer assumes that, you know, things are dangerous unless you specify otherwise.

48:48.000 --> 48:55.000
 So we need to tell it that this is something where I want to give it permission to execute this as a script.

48:55.000 --> 49:00.000
 So if I type LS minus LA.

49:00.000 --> 49:04.000
 Actually, just LS minus a would be fine that no LS minus L.

49:04.000 --> 49:13.000
 Oh, here's a trick. I want to repeat the last command, but I want to change the eight when L. So just press up arrow to get back the last command.

49:13.000 --> 49:16.000
 Backspace, make that an L.

49:16.000 --> 49:23.000
 So this thing over here we skipped over before. This is what's called the permissions this tells you what you're allowed to do with the file.

49:23.000 --> 49:32.000
 So it says you're allowed to read it at W says you're allowed to write to it. And this dash here if that was an X means you're allowed to execute it.

49:32.000 --> 49:41.000
 So to change the permissions of a file. So we want to say that the user is allowed to execute it. We use a program called CH mod.

49:41.000 --> 49:45.000
 So type CH mod and you say, okay, who do you want to change the permissions for.

49:45.000 --> 49:51.000
 And I say this user, that's a W. What permissions do you want to change? I want to add the executable permission.

49:51.000 --> 50:00.000
 So you say plus X, and then you type the name of the program that you exit there that you want to change the permissions for. So press tab.

50:00.000 --> 50:05.000
 And so now if I go LS minus L I press up arrow twice and then hit enter.

50:05.000 --> 50:08.000
 There's that X we wanted.

50:08.000 --> 50:14.000
 Okay, so now I should be able to rerun dot slash set up conduct so press up a few times to find that.

50:14.000 --> 50:18.000
 There it is and hit enter.

50:18.000 --> 50:27.000
 And so that's all going to go ahead and download and set that up for us.

50:27.000 --> 50:38.000
 Okay, so well that's happening. Does anybody that will take a minute or choose anybody have any questions or comments up to this point.

50:38.000 --> 50:50.000
 Could you hear me. I had a doubt which version of Python are we using right now and in case of some other kind of experimentation. If we want to switch Python versions.

50:50.000 --> 50:52.000
 Do you have any recommendations on that?

50:52.000 --> 50:56.000
 So this is just going to use whatever the default is.

50:56.000 --> 51:02.000
 And generally speaking, the default will be the most recent release.

51:02.000 --> 51:12.000
 So we can check which version it's going to be by looking at member forge and.

51:12.000 --> 51:17.000
 Say which version.

51:17.000 --> 51:22.000
 Latest installers have Python 3.9.

51:22.000 --> 51:32.000
 So I just use whatever's like the default because that's going to be most likely what most other people are using. There is actually a Python 3.10 now.

51:32.000 --> 51:37.000
 But the fact that they're making the default 3.9 suggests.

51:37.000 --> 51:41.000
 Folks are thinking that's probably the most reliable thing to use.

51:41.000 --> 51:44.000
 So that's what I would also recommend using.

51:44.000 --> 51:55.000
 That's a nice thing about mamba for sure. And I come back that allows you to create environments very easily. So we just want to experiment with a different Python version.

51:55.000 --> 52:11.000
 Or with some different sets of packages. And it's just one comment in your terminal that you have to execute and you're transported to a new environment, which is very helpful.

52:11.000 --> 52:23.000
 Yeah, although I would recommend not using different versions of Python. If you can avoid it, sometimes you need to because you need to check compatibility with a lot of workplaces use really old versions.

52:23.000 --> 52:28.000
 There's actually if you look at Python EO L for end of life.

52:28.000 --> 52:33.000
 There's a list of like when each version of Python.

52:33.000 --> 52:36.000
 Became end of life, which means you shouldn't be using it anymore.

52:36.000 --> 52:50.000
 So 3.6 isn't now officially ended security support. So if your workplace is using 3.6 or older, you should be strongly encouraging them to upgrade, because it's insecure.

52:50.000 --> 52:56.000
 And so currently 3.7 to 3.10 are all supported versions of Python.

52:56.000 --> 53:07.000
 So I do must, I do tend to like avoid using the very most recent version for probably year after it's released because it does, I find it takes a while for everybody to get compatible.

53:07.000 --> 53:18.000
 3.10 in particular introduced some nasty in compatibilities, which I try to make sure of last day I works with them with all the versions, as long as PyTorch does.

53:18.000 --> 53:21.000
 But yeah, I'd say the penultimate versions are good.

53:21.000 --> 53:24.000
 And that's the default.

53:24.000 --> 53:29.000
 So look at that we just ran a single command and it downloaded and installed.

53:29.000 --> 53:37.000
 Sorry, I have run into an error saying, may I share my screen if that's right.

53:37.000 --> 53:43.000
 Of course. Absolutely. Do I need to do anything? Yeah, you might need to give me permission to share.

53:43.000 --> 53:45.000
 I'll stop sharing.

53:45.000 --> 53:50.000
 And then.

53:50.000 --> 53:52.000
 Okay, got it. Thank you.

53:52.000 --> 53:57.000
 No worries. Sure. Great. This is great. Our first debugging session. Here we go.

53:57.000 --> 53:58.000
 Yeah.

53:58.000 --> 54:01.000
 So this is the error. I think.

54:01.000 --> 54:05.000
 Expected environment, not found at prefix.

54:05.000 --> 54:08.000
 Interesting. Okay.

54:08.000 --> 54:14.000
 So did you do the manual version first and then now you're doing the script version or.

54:14.000 --> 54:15.000
 That's right.

54:15.000 --> 54:18.000
 But I removed the through our M&R.

54:18.000 --> 54:23.000
 So I see the problem. Just see how you've got base and brackets before your.

54:23.000 --> 54:27.000
 Yes. Okay. That means you're, you're inside Conda right now.

54:27.000 --> 54:30.000
 So you removed it, but then you didn't close and reopen your shell.

54:30.000 --> 54:34.000
 Oh, I see. So let's start again. So close your, close your shell.

54:34.000 --> 54:35.000
 Yep.

54:35.000 --> 54:45.000
 And reopen it.

54:45.000 --> 54:48.000
 Okay. Now, so the next thing you'll see here is it's complaining.

54:48.000 --> 54:53.000
 No such file directory. Oh, that's something else. No fun about that. Okay. Great. So.

54:53.000 --> 55:01.000
 Oh, now, yeah, good. So that's something that actually just did is she typed CD with nothing after it. And that put her in her home directory.

55:01.000 --> 55:07.000
 So you've been to on WSL is a bit weird. Most things put you there by default. This one doesn't.

55:07.000 --> 55:08.000
 Okay, great.

55:08.000 --> 55:10.000
 And that should run the setup kind of file.

55:10.000 --> 55:14.000
 So I would do an iron minus IRF member forge at this point.

55:14.000 --> 55:19.000
 And then yeah, and then dot slash set up under that SH and then yeah, come back.

55:19.000 --> 55:24.000
 Good. Nice. All right. Then then come back to us. If that.

55:24.000 --> 55:26.000
 We'll do.

55:26.000 --> 55:29.000
 All right. Thank you so much. My pleasure.

55:29.000 --> 55:32.000
 I think the Python versions that we discussed before.

55:32.000 --> 55:34.000
 It is very rare.

55:34.000 --> 55:39.000
 But it happens that you might encounter from code and keep how that you would want to use your project.

55:39.000 --> 55:46.000
 And it would use it would require some Python version, you know, that's much earlier from what you're using.

55:46.000 --> 55:52.000
 And in the environment that will be using a Jupyter notebook.

55:52.000 --> 56:01.000
 There is actually a way to run a specific version of Python for a for a given notebook.

56:01.000 --> 56:05.000
 Okay, should we add that to our list of things to talk about them? That sounds useful.

56:05.000 --> 56:08.000
 Should I put that here? Things to cover?

56:08.000 --> 56:10.000
 Sure. Running.

56:10.000 --> 56:22.000
 I mean, it's useful in the sense that you don't have to switch environments while you're working on something and usually that would be part of your workflow that you want to do something to your data.

56:22.000 --> 56:24.000
 Right.

56:24.000 --> 56:26.000
 Thanks.

56:26.000 --> 56:27.000
 Great.

56:27.000 --> 56:32.000
 Okay. So I have to close and read my terminal.

56:32.000 --> 56:35.000
 Done. And so again, we've got that base there.

56:35.000 --> 56:39.000
 Okay. And we'll also double check with which Python.

56:39.000 --> 56:41.000
 Okay.

56:41.000 --> 57:01.000
 So with Python installed, we can run Python scripts, which isn't that useful of itself and less, I mean, because we want to be able to like, you know, have some environment we can, we can work in particularly in particular, we want Jupyter.

57:01.000 --> 57:04.000
 So we can install.

57:04.000 --> 57:14.000
 We can install stuff into our Python environment. But actually this Python environment, it's more than just Python, we can actually install.

57:14.000 --> 57:21.000
 Just any program we like, in fact, into into here. So basically what.

57:21.000 --> 57:42.000
 And so what the member forge and conga and so forth do is they basically create a whole kind of directory of programs and libraries for you in your home directory. So it's not just for setting up Python, but for installing literally any program you want.

57:42.000 --> 57:53.000
 And then often when you install something you don't just end up with a Python library, but there's actually programs that you can run like Jupyter, for example.

57:53.000 --> 57:56.000
 Jeremy just a very quickly. This is a quick interruption.

57:56.000 --> 58:08.000
 I think maybe some people might find it helpful. I even even I find it helpful to still try and understand what I guess what it disambiguates mamba from conga from using PIP. Why would you choose one over the other.

58:08.000 --> 58:20.000
 Okay, cool. Perfect. So, so how do you install software into your Python environment. Well, let's start just by talking about how do you install Python libraries into your conga environment.

58:20.000 --> 58:28.000
 And Nick just mentioned the three options you have, which is conga, PIP and mamba you'll come across all of these three things.

58:28.000 --> 58:41.000
 So, let's just focus first of all on conga and member. So, conga and member literally two ways of doing the same thing. And they are fully compatible with each other.

58:41.000 --> 58:44.000
 Mamba is a faster version of conga.

58:44.000 --> 58:47.000
 So why would you use conga.

58:47.000 --> 59:06.000
 Maybe you wouldn't. But mamba is very new. So the vast majority of documentation you'll find on the internet users conga. Anytime you see something that says conga blah, you can type mamba blah and generally speaking that's going to happen much faster, at least if the

59:06.000 --> 59:13.000
 conga blah is install. So, let's look at an example.

59:13.000 --> 59:26.000
 If I want to, so I really helpful thing for playing around with Python at the command line is I Python that's interactive Python, which we'll play with now I don't have I Python doesn't exist.

59:26.000 --> 59:33.000
 Right. Now when I try to run it, it says, Oh, did you mean some of these other things. This is, this is you bun to talking to me.

59:33.000 --> 59:43.000
 I don't want make sure you never install any Python stuff through through brew on Mac or apt on Ubuntu or whatever.

59:43.000 --> 59:53.000
 That's just for the system Python only use conga, mamba or pip. The vast majority of the time you're going to be using mamba. So if I type mamba.

59:53.000 --> 59:58.000
 If I just type mamba, then it tells me, okay, well, what do you want to do.

59:58.000 --> 1:00:05.000
 And so, in fact, it even says conga is a tool for blah, blah, blah. So you can see mamba and conga really get mixed up right.

1:00:05.000 --> 1:00:16.000
 These are things you can do. Most of the time, after typing mamba, you're going to be typing install. So, mamba install. What do you want to install? I Python.

1:00:16.000 --> 1:00:25.000
 And so what that's going to do is go away and check its index to see if anybody has uploaded something called.

1:00:25.000 --> 1:00:32.000
 I Python. And if they have, it's then going to see what are all of the things that I Python depends on.

1:00:32.000 --> 1:00:38.000
 And so it's now going to check with me. It's going to say, okay, in order to use I Python, you got to install all these other things as well.

1:00:38.000 --> 1:00:42.000
 Is that okay? And I'll say, yep, that's absolutely fine.

1:00:42.000 --> 1:00:46.000
 So that goes ahead and downloads those things.

1:00:46.000 --> 1:00:50.000
 And it's awesome. And now I can type my Python.

1:00:50.000 --> 1:00:55.000
 And there we go. So this is a Python.

1:00:55.000 --> 1:01:02.000
 A REPL is a read eval print loop. I can type things.

1:01:02.000 --> 1:01:07.000
 And it will tell me the answers. Okay.

1:01:07.000 --> 1:01:21.000
 So this is like a good way for quickly experimenting with stuff in Python on the command line. I don't use it very much because I mainly use Jupyter. But, you know, sometimes we really quick and dirty stuff can be helpful.

1:01:21.000 --> 1:01:30.000
 If you've read West McKinney's fantastic pandas and so forth book Python for data analysis, he does most things in I Python.

1:01:30.000 --> 1:01:41.000
 So you close to close I Python, you close it in the same way as the fastest way also to close a bash or ZSH shell, which is to hold down control and press D.

1:01:41.000 --> 1:01:53.000
 And that exits. Okay, so control D is a nice fast way of closing probably most programs at your terminal.

1:01:53.000 --> 1:02:01.000
 Okay, so that's how you install stuff.

1:02:01.000 --> 1:02:04.000
 So let's install PyTorch.

1:02:04.000 --> 1:02:09.000
 Shall we?

1:02:09.000 --> 1:02:20.000
 So PyTorch install.

1:02:20.000 --> 1:02:25.000
 So PyTorch probably gets started, I guess.

1:02:25.000 --> 1:02:28.000
 There we are. Start locally.

1:02:28.000 --> 1:02:31.000
 Get the latest version.

1:02:31.000 --> 1:02:44.000
 It's choosing Windows, but I'm actually not on Windows. Like I'm not WSL is not considered Windows. It's considered Linux. So Linux, kind of Python.

1:02:44.000 --> 1:02:52.000
 And then there's various platforms you can choose. So if you've got an NVIDIA GPU, which you probably don't, you would choose CUDA.

1:02:52.000 --> 1:03:00.000
 And if you don't, you would choose CPU. I actually do have an NVIDIA GPU on my laptop, but just to keep things simple, I'm going to do this.

1:03:00.000 --> 1:03:03.000
 And you can see by default, it says Conda install.

1:03:03.000 --> 1:03:08.000
 So remember, it's going to be faster if I use Mamba install. So I'm going to copy everything except the Conda copy.

1:03:08.000 --> 1:03:17.000
 And then over here, I'll type Mamba and then Ctrl Shift V to paste and enter.

1:03:17.000 --> 1:03:26.000
 There we go. Now you'll see here, it's going to install PyTorch.

1:03:26.000 --> 1:03:55.000
 And this is called a channel, a PyTorch channel. When people upload stuff that you can install from Mamba, it can kind of be installed to the main default repository that people grab stuff from, which in the case of the Mamba forage package we're using is called Conda Forage.

1:03:55.000 --> 1:04:04.000
 Or they can upload it to their own channel. So PyTorch and FastDI and NVIDIA, we all upload things to our own channel.

1:04:04.000 --> 1:04:15.000
 So to get stuff from the PyTorch channel, you say minus C PyTorch, that says, please search in PyTorch's channel for this software.

1:04:15.000 --> 1:04:29.000
 Okay, so it's now downloading all the packages that we asked for, and also decompressing them.

1:04:29.000 --> 1:04:42.000
 And so this is basically a list of all of the stuff that it figured out was needed to install PyTorch.

1:04:42.000 --> 1:04:59.000
 So let's say that I'm, yeah, like I just come along and I type in Mamba, install PyTorch or something similar, or even if I'm reading through a blog post or a tutorial and I accidentally type in pip install xyz.

1:04:59.000 --> 1:05:03.000
 Have I created a cardinal scene for which there is no return.

1:05:03.000 --> 1:05:13.000
 Even if you've pip installed something rather than Mamba installing the thing.

1:05:13.000 --> 1:05:18.000
 Correct, yeah. So if you pip install PyTorch, like that is an option here.

1:05:18.000 --> 1:05:26.000
 The thing is though that they've got some extra things here to make sure that you get the version you want.

1:05:26.000 --> 1:05:43.000
 So for one thing, if you've got a graphics card, right, an Nvidia graphics card, pip installing won't work unless you do a lot of futzing around with installing Nvidia's CUDA software development kit, which you don't want to do that.

1:05:43.000 --> 1:05:44.000
 It's annoying.

1:05:44.000 --> 1:05:45.000
 Right.

1:05:45.000 --> 1:05:51.000
 If you use Konda or Mamba to install it, it installs those libraries automatically for you.

1:05:51.000 --> 1:05:57.000
 Even if you're using Windows, your Nvidia GPU will still work.

1:05:57.000 --> 1:06:13.000
 So yeah, in general, installing with Konda or Mamba is going to more reliably give you the kind of correct setup of everything without you futzing around, because Konda and Mamba are able to install what's called binary dependencies so installs all the libraries you need.

1:06:13.000 --> 1:06:20.000
 If you've accidentally pip installed something, you can just type pip uninstall the same thing.

1:06:20.000 --> 1:06:25.000
 The problem is though that pip is going to have installed also a bunch of dependencies.

1:06:25.000 --> 1:06:31.000
 Again, they came from pip rather than Mamba and again, they might not be the right versions that are optimized for your machine.

1:06:31.000 --> 1:06:39.000
 So, yeah, you know, I would be inclined to delete my member for directory and start again.

1:06:39.000 --> 1:06:46.000
 Particularly if I did that for PyTorch because it's just really important to have a good PyTorch installation.

1:06:46.000 --> 1:06:51.000
 So that would be certainly my recommendation. I feel a bit the same way when we do Jupiter.

1:06:51.000 --> 1:06:54.000
 If you accidentally pip installed Jupiter.

1:06:54.000 --> 1:07:06.000
 You know, I just been trying to start again. But if you always type Mamba or Konda instead of pip, just make that your habit, then you will get in that situation.

1:07:06.000 --> 1:07:08.000
 That's kind of helpful.

1:07:08.000 --> 1:07:09.000
 Yeah.

1:07:09.000 --> 1:07:10.000
 Yeah.

1:07:10.000 --> 1:07:11.000
 Can you do me?

1:07:11.000 --> 1:07:12.000
 Yes.

1:07:12.000 --> 1:07:20.000
 So, for certain things I believe was Tim, there is no way to install this on that.

1:07:20.000 --> 1:07:22.000
 I didn't see it.

1:07:22.000 --> 1:07:25.000
 There is we will get to that, don't worry.

1:07:25.000 --> 1:07:28.000
 But for now, my channel for fast channel.

1:07:28.000 --> 1:07:31.000
 We'll let you do that.

1:07:31.000 --> 1:07:36.000
 Can I just type in or just make it make a comment.

1:07:36.000 --> 1:07:48.000
 With a pip now, if I understand correctly, I think like if you just do pip, many like set up a con environment. That's the pip is still going to be, I think, for like the system right now what I usually do.

1:07:48.000 --> 1:07:53.000
 No, no, no, it's not. It'll be fine. In fact, let's check, shall we?

1:07:53.000 --> 1:08:00.000
 Okay.

1:08:00.000 --> 1:08:06.000
 All right, so which, we're all good. So it should be a problem.

1:08:06.000 --> 1:08:15.000
 No, but like if you were to create a new environment, right, then, because right now you're from the base, right? So if you create your own environment.

1:08:15.000 --> 1:08:19.000
 Well, we have a good environment yet so I wouldn't worry too much. Okay.

1:08:19.000 --> 1:08:22.000
 Okay.

1:08:22.000 --> 1:08:32.000
 Amain, did you have a question or comment?

1:08:32.000 --> 1:08:35.000
 And it was the same as always discuss.

1:08:35.000 --> 1:08:43.000
 Okay. So now that we've like installed this stuff, how do we know if it's working? So if I hit up arrow, I can find my Python. And I could just try importing it.

1:08:43.000 --> 1:08:51.000
 And there it is, right? So I can now type torch dot. And if I hit tab in I Python, it actually gives me a nice list of things.

1:08:51.000 --> 1:08:57.000
 So, for example, torch, tensor.

1:08:57.000 --> 1:09:02.000
 And you can see it's going to give me the arguments.

1:09:02.000 --> 1:09:08.000
 There we go. So that's working. So remember control D.

1:09:08.000 --> 1:09:16.000
 So, yeah, another thing we probably want to install is, is Jupiter.

1:09:16.000 --> 1:09:24.000
 So there's a couple of different versions of Jupiter. There's Jupiter lab, this is a notebook.

1:09:24.000 --> 1:09:29.000
 So we'll probably use lab, because we're using member forge.

1:09:29.000 --> 1:09:34.000
 This, this kind of forge channel, we're going to be using automatically.

1:09:34.000 --> 1:09:40.000
 Right. So we don't need this minus C kind of forge so we can just type.

1:09:40.000 --> 1:09:48.000
 So, remember, install Jupiter lab.

1:09:48.000 --> 1:09:55.000
 Okay. So that's got a lot of stuff. It's a big piece of software.

1:09:55.000 --> 1:10:00.000
 That's okay.

1:10:00.000 --> 1:10:02.000
 Doesn't take too long.

1:10:02.000 --> 1:10:05.000
 There we go. It's finished.

1:10:05.000 --> 1:10:09.000
 Okay. So now we're ready to create our first notebook.

1:10:09.000 --> 1:10:15.000
 So it's nice to keep things organized. So let's create a directory for our notebooks.

1:10:15.000 --> 1:10:21.000
 So I make a directory called nbs and change directory to nbs.

1:10:21.000 --> 1:10:29.000
 So that's empty. Okay. And so now we can type Jupiter lab.

1:10:29.000 --> 1:10:37.000
 And there it is. Okay. So, um, it got a little bit confused here in my version because

1:10:37.000 --> 1:10:45.000
 WSL tried to open my browser, but my browser is a Windows application, not a Ubuntu application.

1:10:45.000 --> 1:10:49.000
 So it tried to open it up and said there was an error.

1:10:49.000 --> 1:10:59.000
 Now it's actually fine. I can still use this. So you can see here, if I click, if these are hyperlinks, I can.

1:10:59.000 --> 1:11:03.000
 Control click on it.

1:11:03.000 --> 1:11:05.000
 And it opens it up.

1:11:05.000 --> 1:11:07.000
 And that's it.

1:11:07.000 --> 1:11:09.000
 Right.

1:11:09.000 --> 1:11:21.000
 If I don't want it to complain like that, you can say, don't open a browser by typing no dash browser.

1:11:21.000 --> 1:11:26.000
 And that's it. Okay. And then click.

1:11:26.000 --> 1:11:36.000
 You're on the troll click, actually. Yes, Alan. Hi, everyone. I'm from Brisbane as well.

1:11:36.000 --> 1:11:42.000
 Apparently I'm allowed out of isolation today, but I don't feel that great yet.

1:11:42.000 --> 1:11:44.000
 Much better though. So that's fine.

1:11:44.000 --> 1:11:55.000
 You know, the most important thing to know about for a covert is to take it easy on exercise until you're fully recovered because it's actually makes long covert higher probability if you exercise when you still got any symptoms.

1:11:55.000 --> 1:11:57.000
 So take it easy.

1:11:57.000 --> 1:12:02.000
 That's good. Well, I'm going to go for a walk later. Just the shops.

1:12:02.000 --> 1:12:10.000
 And I just want to say with with that, uh, Jupiter lab and then no browser.

1:12:10.000 --> 1:12:15.000
 This is one of the ones where I discovered the aliases were really my friends.

1:12:15.000 --> 1:12:17.000
 I was about to show you that. Yes.

1:12:17.000 --> 1:12:25.000
 I know. Yeah. So, um, yeah, exactly. So.

1:12:25.000 --> 1:12:28.000
 Um,

1:12:28.000 --> 1:12:36.000
 I have a.

1:12:36.000 --> 1:12:38.000
 See what I got here.

1:12:38.000 --> 1:12:42.000
 So I actually have even an alias for alias.

1:12:42.000 --> 1:12:48.000
 So for things that are kind of long and annoying to type.

1:12:48.000 --> 1:12:56.000
 You can create an alias. So.

1:12:56.000 --> 1:13:02.000
 There's a few things we could do to not have to type Jupiter lab no browser. One would be to hit up arrow.

1:13:02.000 --> 1:13:08.000
 Now one nice thing about up arrow is if I close my shell and go back into it.

1:13:08.000 --> 1:13:11.000
 Up arrow is your works.

1:13:11.000 --> 1:13:16.000
 And by the way, none of this stuff is magic. Right. If you, if you're wondering, why does that still work?

1:13:16.000 --> 1:13:21.000
 It's because bash creates a file called bash history.

1:13:21.000 --> 1:13:25.000
 Which is actually really useful to know about because everything you've ever done.

1:13:25.000 --> 1:13:32.000
 Is listed in that file. So here's all the things we do. This is another good reason to use the terminal is you can always go back and repeat things.

1:13:32.000 --> 1:13:35.000
 This is actually how I create scripts. I do everything interactively.

1:13:35.000 --> 1:13:42.000
 And then I copy and paste stuff from my bash history into a text file. And that creates a script.

1:13:42.000 --> 1:13:46.000
 So if I hit up arrow, I can get my capital browser.

1:13:46.000 --> 1:13:54.000
 A very, very, very helpful thing that works in bash and zsh is the control R keyboard shortcut. If I type control R.

1:13:54.000 --> 1:13:58.000
 It says reverse search and then I type J you for Jupiter.

1:13:58.000 --> 1:14:02.000
 That will show me the last thing I type with those letters in.

1:14:02.000 --> 1:14:07.000
 Okay. And if that's not the right one, just hit control R again and it will keep searching.

1:14:07.000 --> 1:14:09.000
 So that's very useful.

1:14:09.000 --> 1:14:20.000
 Jamie, is there any way to clean this is so clear. This is the only, I assume that after a while it becomes such a long for like it's very difficult to make it.

1:14:20.000 --> 1:14:21.000
 Don't worry about it.

1:14:21.000 --> 1:14:26.000
 It's just text. I think it automatically like cleans itself, but yeah, just leave it.

1:14:26.000 --> 1:14:31.000
 You can always delete it if you want to, or you can even edit it with an editor.

1:14:31.000 --> 1:14:35.000
 Yeah, it's kind of nice to have all your history there in my opinion.

1:14:35.000 --> 1:14:38.000
 Another thing you can do. Sorry.

1:14:38.000 --> 1:14:44.000
 I think by default, it stores 1000 lines or something like that, but you can set it to something more.

1:14:44.000 --> 1:14:48.000
 Yeah, that's right. I think there's some environment variables.

1:14:48.000 --> 1:15:00.000
 And then one other one which is kind of interesting is exclamation mark followed by some letters runs the last thing that starts with those letters so exclamation mark J you will run Jupiter lab no browser.

1:15:00.000 --> 1:15:09.000
 Something that you'll see quite often is exclamation mark exclamation mark, and that means just rerun the last command.

1:15:09.000 --> 1:15:11.000
 As you see.

1:15:11.000 --> 1:15:15.000
 And you can put that anywhere by the way. So for example, if I type echo.

1:15:15.000 --> 1:15:26.000
 Dollar dollar that filtered out as echo you've got a lab no browser. So there's a little trick for you as well. Okay, so.

1:15:26.000 --> 1:15:30.000
 I mentioned aliases I could type alias.

1:15:30.000 --> 1:15:36.000
 Jupiter lab JL equals.

1:15:36.000 --> 1:15:38.000
 And then I could put.

1:15:38.000 --> 1:15:41.000
 I wonder if this is going to work.

1:15:41.000 --> 1:15:43.000
 Let's try it.

1:15:43.000 --> 1:15:48.000
 Yep. Okay, so alias JL equals echo Jupiter lab.

1:15:48.000 --> 1:15:54.000
 I don't want the echo there. Never mind. So that's just to leave the echo bit.

1:15:54.000 --> 1:15:56.000
 Oh, okay.

1:15:56.000 --> 1:16:06.000
 When I am editing this line. There's a few shortcut keys to know about to go to the end of a line type control E.

1:16:06.000 --> 1:16:10.000
 To go to the start of a line type control a.

1:16:10.000 --> 1:16:14.000
 And then to go forward and backward by a word at a time.

1:16:14.000 --> 1:16:21.000
 Press alt left and right, which radical Nick is that option left and right on a Mac.

1:16:21.000 --> 1:16:24.000
 To move by a word.

1:16:24.000 --> 1:16:29.000
 I'm headed for a month but couldn't get used to it.

1:16:29.000 --> 1:16:31.000
 Nick, you want to Mac?

1:16:31.000 --> 1:16:35.000
 I'm using one as we speak right now because it's better for running zoom on.

1:16:35.000 --> 1:16:40.000
 Yeah, you can do things like that, although I'm you still the email keybladings, but that's a rabbit hole.

1:16:40.000 --> 1:16:42.000
 I'm not going to go there.

1:16:42.000 --> 1:16:48.000
 So now I've got this alias. I can just type JL.

1:16:48.000 --> 1:16:57.000
 And it does the same thing. Now the problem is that's not going to appear automatically next time I run my terminal.

1:16:57.000 --> 1:17:05.000
 Do you remember I told you about that special hidden thing called dot bash RC that automatically runs.

1:17:05.000 --> 1:17:10.000
 So if we put it in there.

1:17:10.000 --> 1:17:12.000
 Then it will automatically run.

1:17:12.000 --> 1:17:19.000
 So if I close my terminal and reopen it.

1:17:19.000 --> 1:17:33.000
 There's JL beautiful now you'll notice that when I edit files in the terminal, I tend to use a program called VIM, which as Nick well knows is obviously much better than the competition called emacs.

1:17:33.000 --> 1:17:42.000
 But you don't have to use either of these. You can use whatever you like. And in fact, on a Mac, if you type open.

1:17:42.000 --> 1:17:50.000
 Open dot, it'll open the finder at this directory or on Windows type.

1:17:50.000 --> 1:17:54.000
 Explorer dot X E dot.

1:17:54.000 --> 1:17:56.000
 Right. Oh, why doesn't that working?

1:17:56.000 --> 1:17:58.000
 That's weird.

1:17:58.000 --> 1:18:03.000
 Okay, that's never happened before.

1:18:03.000 --> 1:18:05.000
 All right, so.

1:18:05.000 --> 1:18:10.000
 Amazing.

1:18:10.000 --> 1:18:20.000
 Must be some recent change to WSL which I will have to look into to find out why Explorer dot X is not working.

1:18:20.000 --> 1:18:24.000
 I think you made it type in the spelling explorer.

1:18:24.000 --> 1:18:26.000
 What did I do wrong.

1:18:26.000 --> 1:18:29.000
 I think you typed it.

1:18:29.000 --> 1:18:31.000
 Okay, you added an extra period.

1:18:31.000 --> 1:18:38.000
 The period at the end is intentional. That's to say, open it in this directory.

1:18:38.000 --> 1:18:42.000
 I tried to have complete and to have completed work. So.

1:18:42.000 --> 1:18:46.000
 Is it because they've changed it to work on my end.

1:18:46.000 --> 1:18:48.000
 No, it's not.

1:18:48.000 --> 1:18:49.000
 It works.

1:18:49.000 --> 1:18:52.000
 I think it's a good problem with your user.

1:18:52.000 --> 1:18:55.000
 Maybe you need to go to other user.

1:18:55.000 --> 1:18:57.000
 Yeah, I tried it in another user.

1:18:57.000 --> 1:19:01.000
 I think.

1:19:01.000 --> 1:19:10.000
 I think I have a lot of time to go to the end of my mind.

1:19:10.000 --> 1:19:14.000
 Come back to that another day. I wonder if like.

1:19:14.000 --> 1:19:17.000
 Yeah, they've obviously changed something.

1:19:17.000 --> 1:19:18.000
 It seems to work for me.

1:19:18.000 --> 1:19:21.000
 Yeah, I don't know if there's never not worked before.

1:19:21.000 --> 1:19:27.000
 Okay, we'll figure this out and we'll cover it in the next session.

1:19:27.000 --> 1:19:32.000
 Okay.

1:19:32.000 --> 1:19:35.000
 And we guess.

1:19:35.000 --> 1:19:37.000
 It's pretty amazing.

1:19:37.000 --> 1:19:41.000
 And one of the things I like particularly about it.

1:19:41.000 --> 1:19:43.000
 WSL like with the expert.

1:19:43.000 --> 1:19:45.000
 That's a bad trick.

1:19:45.000 --> 1:19:48.000
 I think that's super useful and super amazing.

1:19:48.000 --> 1:19:54.000
 But another wonderful thing that WSL allows you to do is to run a GUI Linux

1:19:54.000 --> 1:19:57.000
 in Linux.

1:19:57.000 --> 1:20:02.000
 For example, I, for example, use a password manager.

1:20:02.000 --> 1:20:04.000
 I can't imagine living without it.

1:20:04.000 --> 1:20:08.000
 And it's a key pass.

1:20:08.000 --> 1:20:10.000
 That's a use.

1:20:10.000 --> 1:20:16.000
 I can just start it in WSL and it pops up a window in windows.

1:20:16.000 --> 1:20:19.000
 So I don't have to go via the deadline.

1:20:19.000 --> 1:20:27.000
 I don't think you can just access through WSL.localhost.

1:20:27.000 --> 1:20:34.000
 So if I change this to JPH00, I can do it this way.

1:20:34.000 --> 1:20:37.000
 And so here's my bash RC.

1:20:37.000 --> 1:20:42.000
 And then I can edit it with whatever I want to.

1:20:42.000 --> 1:20:46.000
 Visual Studio code, for example.

1:20:46.000 --> 1:20:54.000
 All right.

1:20:54.000 --> 1:20:56.000
 Okay.

1:20:56.000 --> 1:21:07.000
 So let's take a quick look at JPH00.

1:21:07.000 --> 1:21:10.000
 CD and these.

1:21:10.000 --> 1:21:14.000
 So when I run JPH00.

1:21:14.000 --> 1:21:22.000
 I'll do it in my other window.

1:21:22.000 --> 1:21:24.000
 JL.

1:21:24.000 --> 1:21:25.000
 Okay.

1:21:25.000 --> 1:21:29.000
 So I'll control click here.

1:21:29.000 --> 1:21:35.000
 When I run JPH00 by default, it's going to kind of be inside the nb's directory.

1:21:35.000 --> 1:21:40.000
 So when it says here, there's nothing in here, like it kind of says slash.

1:21:40.000 --> 1:21:41.000
 It doesn't really mean slash.

1:21:41.000 --> 1:21:43.000
 It means wherever I, wherever you launched me from.

1:21:43.000 --> 1:21:45.000
 So this is the contents of the nb's directory.

1:21:45.000 --> 1:21:49.000
 So I can now create a new notebook.

1:21:49.000 --> 1:21:51.000
 Like so.

1:21:51.000 --> 1:21:54.000
 And run a cell.

1:21:54.000 --> 1:21:58.000
 And save.

1:21:58.000 --> 1:21:59.000
 Okay.

1:21:59.000 --> 1:22:01.000
 By default, it's called untitled.ipreneb.

1:22:01.000 --> 1:22:03.000
 So for now, so that's now running here, right?

1:22:03.000 --> 1:22:06.000
 So I can't like do stuff here because it's busy running Jupyter.

1:22:06.000 --> 1:22:09.000
 So I'll open up another tab.

1:22:09.000 --> 1:22:11.000
 And I can LS.

1:22:11.000 --> 1:22:14.000
 And so on Windows terminal, it's just control tab between tabs.

1:22:14.000 --> 1:22:17.000
 And you can see there it is untitled.ipreneb.

1:22:17.000 --> 1:22:18.000
 Right.

1:22:18.000 --> 1:22:19.000
 And we can even take a look at it.

1:22:19.000 --> 1:22:21.000
 It's just a normal text file.

1:22:21.000 --> 1:22:22.000
 Right.

1:22:22.000 --> 1:22:24.000
 Okay.

1:22:24.000 --> 1:22:31.000
 So we have Jupyter working and we can import torch.

1:22:31.000 --> 1:22:40.000
 Please have Jupyter and ipay widgets.

1:22:40.000 --> 1:22:41.000
 Okay.

1:22:41.000 --> 1:22:42.000
 It's interesting.

1:22:42.000 --> 1:22:45.000
 Torch dot tensor.

1:22:45.000 --> 1:22:48.000
 Cool.

1:22:48.000 --> 1:22:51.000
 Okay.

1:22:51.000 --> 1:22:55.000
 So I'm guessing we need to install ipay widgets.

1:22:55.000 --> 1:22:57.000
 So we're getting pretty good at this.

1:22:57.000 --> 1:22:59.000
 Let's try it.

1:22:59.000 --> 1:23:05.000
 Mamba install ipay widgets.

1:23:05.000 --> 1:23:19.000
 Oh, this is needs to be reopened.

1:23:19.000 --> 1:23:20.000
 Okay.

1:23:20.000 --> 1:23:23.000
 That's a process not installed by default.

1:23:23.000 --> 1:23:27.000
 There you go.

1:23:27.000 --> 1:23:29.000
 So I'll close Jupyter.

1:23:29.000 --> 1:23:37.000
 I'll open up control click.

1:23:37.000 --> 1:23:38.000
 I already had it open.

1:23:38.000 --> 1:23:40.000
 And let's see if it now works.

1:23:40.000 --> 1:23:41.000
 Okay.

1:23:41.000 --> 1:23:42.000
 Oh, did I say new?

1:23:42.000 --> 1:23:49.000
 Didn't mean to send you.

1:23:49.000 --> 1:23:50.000
 There we go.

1:23:50.000 --> 1:23:53.000
 And let's see if it now works.

1:23:53.000 --> 1:23:54.000
 Yep.

1:23:54.000 --> 1:23:58.000
 It's not complaining anymore.

1:23:58.000 --> 1:23:59.000
 Okay.

1:23:59.000 --> 1:24:04.000
 And you can see, you put a lab, you can kind of do like normal GUI kind of stuff.

1:24:04.000 --> 1:24:08.000
 So if I went to delete this, I could either go into my terminal and click and type,

1:24:08.000 --> 1:24:11.000
 I'm on title one, or I could right click on this and choose to leave.

1:24:11.000 --> 1:24:16.000
 This feels like a pretty good place to leave things.

1:24:16.000 --> 1:24:20.000
 Does anybody have any questions or comments before we.

1:24:20.000 --> 1:24:22.000
 Wrap up.

1:24:22.000 --> 1:24:30.000
 Appreciate the session, Jeremy. That was really helpful in setting up a very smooth as well.

1:24:30.000 --> 1:24:59.000
 Okay.

