 that to be complicated. So I think I've broken the back of it. I think I've basically figured it out. Does anybody have any questions or areas of interest or anything following last chat? Hi Jimmy. Hello Korean. Yeah I'm interested to know more about fast chat generally because I just Google and found it very cute. We will get to that. That might be a little while though. Hi Jeremy. I'm Joe. Hi Joe. Where are you? I'm enjoying this from Jack. Oh just about seven minutes away from where you're at. Oh you're in the other red cliff potential somewhere? No sorry I thought you were in Brisbane. Not red cliff. Not too bad. It's about seven minutes away. So it's still a question I have. Like really impressed with the blogging sort of set up out of Jupiter and just I'm curious what your workflow is and how you are able to do an experiment and be able to blog about it very easily because I find I've got to move it from this GitHub to another sort of thing and there may be things in that space. Definitely. I think we've already let me just double check our list of things to cover. Yeah how to blog is actually number one of our list of things to cover in our walkthroughs topic and I don't think fast chance there yet sort of the add that. Fast chance. There we go. All good questions. I'll introduce myself for a match in Britain as well. I would like to I think we started looking at setting up Jupiter lab last week from remember correctly and so I think we'd install Jupiter lab prior to arch so I even managed to get that working successfully. I let that all work okay. It works. It looks like it's working. And I managed to install fast. So I guess being confident that I can work on that to my machine would be. Yeah that's actually what we're going to do today I think we're going to focus on. Yep get our own kind of start doing some work on our own machine. Yeah exactly. Okay well let's get underway with that. Just to explain something oh this week's something you might have seen last time. I have two different users in my WSL installation. I don't normally but it's just like I just wanted to mention that in a Linux distribution you can add multiple users and switch to them. And so the way you switch between users is by typing pseudo minus u for username and then the username you want then minus i to open up an interactive terminal as that user. So that's why you see me doing this sometimes. So when I do that you can see it's like I said oh welcome JPH 00 and kind of starts in scratch and you can now see before the ad sign it tells me that. The only reason I'm doing that is so that I've got like an empty user that doesn't have anything installed or anything set up so I don't accidentally assume something and fail to create something. Generally speaking there's you won't normally have a reason to create multiple users on your account unless you want to kind of set up something like this it's totally separate. So yeah I thought we could try to like create you know a notebook and Python script and put them in a git repository and you know just kind of go through that workflow basically. So I normally create a directory to put my git repository. So what's a git repository? A git repository is a folder containing files and potentially subfolders which basically to simplify slightly you can easily store somewhere else and the most common place people store it is github.com that they provide free storage of git repositories. And most interestingly git keeps a kind of a copy of every version of your files and you can switch back to any previous version at any time. So if you have a mess something up and save it and then realize later oh I messed it up you can go back and get an old version. So maybe before we create our own github repo we could look at a github repo so we could look at the first AI one. So github as I say is just one particular company that stores git repositories for you. You don't have to use them there's also one called gitlab but I don't know most people use github so I think it's easier to go you know be where everybody else is. And so this is an example of repository. So the name of the repository is fastai and then that belongs to some particular person or organization in this case it belongs to an organization. The organization is called fastai. So if we get rid of the first of those the last of those fastai's this is the organization fastai and you can see the 119 repositories that are in that organization. So if I click on one say fast release see how the URLs change this is this is now the fastai's organizations repository called fast release. So this pair of things with a slash is basically a unique identifier in gitlab for repository because it has the username or organization and the repository. So fastai is an organization my github username is jph 00 and then that also has repositories and so I can click on one like tiny pets and you can see this is now the tiny pets repository in jph 00. Okay so let's go back to the fastai repository. So a repository as I mentioned contains folders and files and then folders can contain folders and files. They can contain basically any kind of folder or any kind of file you like. They ask that your files that each individual file is smaller than 50 megabytes. They don't particularly enforce that though. So that's what we see here. There's a special file which is the file called read me or read me dot md and that file is special because in this display it's automatically shown in this repository website. So a kind of minimal useful repository is something that just contains a read me dot md file and in fact as soon as you have that you have something that you can a website you can show people. So maybe we should start by doing that. So if you go to your own github page github.com slash your username you can click repositories and so you might not have any repositories yet which is fine and here you could click near repository so why don't you go ahead and do that click near repository. And so you need to give it a name. Walk through three. If you want a description not a bad idea to remind yourself of what things are. Sample repo for walk through three of first.ai course. So you can make it private so nobody else can see it or public. Something you'll hear a lot from first AI folks the community alumni myself is that the more you can work in public the better the more you can share your portfolio the better. Something which a lot of folks aren't used to and can feel uncomfortable but like here's here's a place you could start trying that is to make this public if your default is to always make things private maybe try not doing that this time. Okay so we can. Yeah. Walk through second please walk through to. Sorry. The second walk through. Yeah sorry. Yeah thank you. I don't know why I imagined that there was another walk through. Maybe I dreamt it. Okay I guess it's because it's the weekend it's been a long time. So we can say add a read me file. Now there are some things that you don't want to put in Git kind of like temporary files and stuff like that. And there's a special file called dot get ignore which lists all the kinds of files you don't want to store. So if you click on here and start typing Python this will kind of create a list automatically of the kinds of like Python's intermediate files and stuff. So again it's good idea to use a license that allows other people to use this if you don't then other people can't use your code. I always use Apache license too and the reason for that is that it's like gives users you know really as much flexibility as possible and how they use the code but it also has a clause that minimizes the chance that I'm going to get sued for patent violations or that people would use this to kind of enforce patents in inappropriate ways. So can I ask a question? Of course. Sorry my name is Mark I'm from Toronto I'm representing North America here tonight I think. Great. Or this morning. So late night for you. Well it's only nine. It's okay. You're at the of course your west coast. Sorry can you just go a little bit more into the get ignore and I didn't quite follow what that was. Yeah let's create the repository and take a look at it. Okay. Sorry I'm embarrassed I've actually been to Toronto and I've completely butchering my geography. Is this the way you want questions asked or do you want hands put up or something? I like I like you know as informal a conversation as possible. So yeah I'm not even sure I would see if hands go up. So here's the repo we just created and if I click on get ignore it will show me the contents of that text file and so here is the text file called get ignore with line numbers on it. You can see it without anything else by clicking raw. So that's this is just what the text file contains. And you can see for example in Linux a.so file is a compiled C library which is not something you'd normally want to save into a repo. So star.so star means anything. So CXC library files would not be stored. Python has a cache of things that it's pre compiled which it puts in the done to pie cache directory. So this says don't put that into your get repo. So basically when we add stuff to get repos shortly it will by default not include anything that matches these patterns. Does that answer your question Mark? It does in the sort of literal sense I guess. Tell me more about what your non literal sense is. Well so I understand that it's I understand that these are the files that will be excluded but I guess other than just always choosing Python for get ignore I don't know how to decide which files to include and which files to it. Oh yeah okay well we'll see that as we go. One example that will come up if it's not already in here is Jupiter stores backups. The most recent backup saved copy in a backup directory called ipide checkpoints. And when you go to get ads you might say oh it's adding this directory called ipide checkpoints I don't want that. Oh okay I'll put it in my get ignore. So it's generally like if you'll see things that you're like oh I don't need that to be backed up or like oh that's the thing that contains my password. I definitely don't want that in my public get repo. So those are the two main reasons. It's either stuff that doesn't need to be there or stuff that you actively don't want to be there. Okay so but choosing the Python for get ignore is generally a good first step. This is a good start. So this is just kind of pre populated it with a bunch of lines that we'll add to later as we find stuff that we don't want to include. Okay so you can see it's created a readme.md file and if I click that you can see it's here's its contents and that's the same as the contents down here. And so we could like create you know a little website now which is basically having websites a bit of a hit I guess it's a website by editing readme.md. So if you click that little pencil we can now edit. So try editing your readme.md and this is this is markdown which we use in Jupyter. We use in readme files. It's kind of used pretty much everywhere and so it's well worth getting used to. So at this stage the markdown file you've got one line that starts with a hash that means this is a level one heading. A level two heading would have two hashes. Introduction. Okay and then you just put things on separate lines of text. So this is a sample repo or walkthrough of the first today our course and then if you want a new paragraph just put an empty line between them. This is another paragraph and then you know you can have lists by putting hyphens. Okay and so forth. And maybe another header here. Okay so if I save that it doesn't say save it says commit. So this is the concept in Git is that you don't just save things but you create you know a version it's called a commit which is basically all the changes since last time you saved. So commit means save but it means save with version control. And so when you save you need to have some description of what the change was that you made and optionally you can add more details about it. So by default it's made a description for me. So I can commit my changes. And so now if we go to our repo you'll see that we've got more in our readme. You'll also see that this repository now has two commits. So if I want to go back and see what it used to look like then I can see here's the initial commit and here's my update readme. If I click on this commit code over here it shows me the difference. So things with a minus and a red are things I deleted and things and plus and green are things I added. And this is called a diff. A diff for a difference. And so very often people will you know say that they want to have a look at a diff to see like if you've made some changes to their code to see what changes did you make. Otherwise it's very difficult to know what somebody did. So this commit gets automatically gets a little unique name as you see and we can see the diff. Or you can even click on this little button here browse repository at this point in the history. So you can go back and pretend that life was before a minute ago and see exactly what this looked like back then. So this is now looking at the state of this repo before I made the change. So get is pretty handy and get hub is a very useful place to store stuff in get. So generally speaking we don't normally edit things directly with the get hub editor because it's pretty basic. I mean I do sometimes you know if I just want to make a quick change to read me I will sometimes click that pencil button but more often I'll do it on my computer. So to put it on my computer we need to clone the repository. So cloning it means making a kind of a linked copy on our computer. So you see this code button here. We can clone it. We're going to clone it using something called SSH which is something we'll use a lot. And SSH is a way of logging into remote computers and also automatically doing stuff with remote computers and copying stuff from remote computers. So here is a URL it's not to a website but to get repository using SSH. So I can click here to click copy. Right so I've copied that. So how do I clone it? Well the first thing I do is like say let's get things organized. So I like to have a directory for all my clone get repos. So I'll go make to bit cd git and so if I go print working directory you can see I'm in my home and remember that tilde is a shortcut for your home. So I can now type so git is a program on your computer and so you can type get clone and then the URL. So I just pasted it. Okay so there's a lot of security stuff built into SSH and one thing is to make sure that you don't accidentally connect to places you didn't mean to. I don't use that much of the security stuff because I'm not too worried for most things I do. So in this case it's just saying you're sure you want to connect to this new place and I'll just say yes and it's going to save that. Okay so permission denied. All right so I've asked to clone a repository using SSH but I got permission denied and that's because to use SSH you have to use an SSH key. So the first thing I mentioned is if you want to clone somebody else's repository you can use HTTP instead of SSH so I can click here HTTP copy and then I could clone that. And that works fine that's a perfectly reasonable way to work with other people's code. So if I go cd walkthrough to here it is and I can edit the readme and then I could go down and I could add something else and the problem is I can't save that back again without logging in to GitHub. So if I try to commit that I'll explain committing from the command line in a moment but I just want to show you that. Oh okay so the next thing to know is if you want to save stuff back to back to GitHub it needs to know your name and email address. So it tells you some commands you can use so one approach would be just to paste them in. Right and obviously that's not the right email and username but things like this in the terminal they basically always create hidden files in your home directory so if I just type cd it takes me to my home directory and you can actually see here there's now a file called dot get config and so I could edit that and here we go. So info wrap fast.ai say Jeremy Howard. All right now I'll show you a little trick which most people don't know. I want to go back to the directory I was in before. I could type cd git slash walkthrough too or I could just type cd space hyphen and space cd hyphen means change directory to your most recently used directory. So that's very handy no no. One issue with that is if you've like cd three or four times there's no kind of history there so what I would do if I want to come back here later and I'm going all over the place is instead of typing cd you can go push d which is the same as cd but it remembers where you were so if I go push d and change to my home directory I'm now in my home directory I can cd it downloads I can cd to nb's how do I get back to where I was before well I pushed from get walkthrough too so I can pop if I type pop d there we go I'm back where I got worse originally so there's a couple of good tricks for zipping around in your directory structure it's a bit like pressing the back button I guess almost on on a browser. Anyway if I now try to save my change and the way you do that we'll talk about this more in a moment is you push you can see here it's asking for username and so you obviously can't save things to other people's repositories if you don't have their credentials. It's also annoying to type in your username and password all the time so I never use almost never use http get clone for my own repositories instead I use SSH so let's delete that directory and get clone with SSH so click SSH and copy and let's take a look again at this error we got okay so why do we not have permission that's because it doesn't know who we are and it doesn't know that we have permission to copy and change this repository SSH is really nifty it doesn't use passwords instead we create a secret key on our computer for the private key and the second thing called the public key which we can give to other people and then anybody who has our public key will be able to accept we will be able to log into basically but they can't log into us that's why it's cool it's not like a password it's a one way thing so we can get into github into our repos but nobody on github could like log into our computer or anything so we need to create it's called a key pair a public key and a private key so to do that you type SSH oops dash key gen SSH key gen so that's generate SSH keys and then just hit enter hit enter again hit enter again all right so that's created keys in my home directory in dot SSH this one here's the private key and this one here's the public key so we need to tell github about our public key so that we can log in there so to display a file in the terminal without like basically show it all at once you can just type cat so if I go cat in my home directory dot sh dot pub there it is now there's no problem with me showing this on a live stream and it being on a video this is not in any way private or secret because this is just something that lets me if it's placed on another computer let's me log into another computer you think that you've been stored publicly like anyone can access this public key which around me because it's on github yeah so let's put it what we've got to put it on github so let's do that yeah so let's go back to github click on my face and probably going to be in setting somewhere all right here we are SSH and gpg keys there we go um do we not add them here here we go new SSH key title I'll just call this the walkthrough key and paste there we go add maybe at the username I used all right so that is now in my account so I should now be able to rerun that git clone command so remember if you press control R you can type a few letters from a previous command so I'll start typing clone and there it is and so if I hit enter now it's working so I don't have to worry about ever typing in a git password github password so here we are great um let's make sure I've closed my other jupiter session Jeremy I noticed when I did that when I did the SSH key gen yeah I already already had one okay no worries so if you've just used that one yep just use that one there should be an ID ID RSA or ID DSA or something like that that's your private key and the one that ends in dot pub is the one you'll copy over yeah and so you don't need like how did you just split your terminal like that we will learn it's something called tmax tmux but we'll certainly be covering that one of the best things ever all right Jeremy one thing that I just thought might be interesting for people or just to something that can catch people out is making sure that your identity that you set up in your terminal as you showed before and that the email that you use in github said that they're consistent sometimes if you are using a different email or especially if you it's probably not a case here but if you have multiple github accounts you can end up having one identity making commits to a repository that you didn't intend to under that identity and back and forth so just just be careful when you first get started that you're using a consistent email identifier like yeah it's not necessarily always important for your public key but certainly for your identity on github and for where you're going to be making commits and things like that it's often helpful when you get started to make sure they're consistent yeah i mean i don't honestly ever think about that i kind of just chuck in any old email address it doesn't like it's it comes up sometimes but not too often because it's kind of mainly informational i think this information so that other people can it's i find i've found it's more down the line if especially if you have a separate github account for personal and a separate one for work then if you if you have different identities or different emails being so said with it then when you make a commit to a work repo you've accidentally committed it from your personal one which you didn't want to reveal your identity on or whatever so yep okay and somebody else have a question or comment yeah just a in the same context like you said the public key even if somebody else knows it they cannot commit to your bit is that because the private key is unique only on your computer like correct high level correct the private key is the secret code so if you wanted to be able to um you know log in from another computer you would you would copy the private key over there and then that that computer can log in yep so the private key is the thing that says i i can prove i'm jeremy howard and the public key is a thing that says anyone who proved that jeremy howard can log in here thank you no worries this is something that is the display of authentication it's just across many different contexts so github uses it but for instance today i was installing Ubuntu server on my local machine and i could point the installation to take my public key from github just to make things easier let's grab the public key and it's set it up so that i can easily connect to my computer without any additional setup steps so there is absolutely no danger given the current state of mathematics you know to make new information public and uh yeah without that you know going to the uh HTTPS and password authentication that makes it for such a cumbersome uh github workflow that this is so so much yeah yeah SSH is used everywhere so for example i've got a GPU server sitting next to me here which um and then i've set up a um not somebody at my door and i take okay our doorbell keeps switching itself to a christmas chimes for some reason um yeah so i've actually created a profile here for logging into my box which uh as you can see it just calls SSH so and then that's attached to control shift three so any time if i want to log into my GPU box i hit control shift three and here i am i'm now you know typing in just as if i was at my own computer but i'm actually now typing into my GPU server so SSH is a good thing to learn about properly um okay so we have try me uh with regards to creating repose and committing and i mean what we are practicing right now i guess i'm in the course itself you show how we can deploy an application and sometimes you need to do the same thing i mean git push to those application yeah and just wanted to see is it possible to have both github and also pushing a repo communicate with two different destination sources if it makes sense yeah yeah we can do that and we'll be saying that once we start looking at hugging face bases yep yep you can so um you can have as many repos as you like and each repo kind of has this kind of default destination it's connected to which will normally be github but you can even connect one to multiple destinations um choose which one you're pulling and pushing from into um yeah can i ask one more with regards to the token password that you mentioned that for for that ignore file just wanted to see if that is important only for the public reports or even a private repo on github you shouldn't share token passwords or yeah i would tend not to i mean it depends how important it is you know um i mean at least the people on great hub can see it um so you know and it's uh yeah i would i would try to avoid putting private stuff onto public websites in in general um particularly things like that where it's like at some point you might decide oh i want to make this repo public and then you forget that somewhere there was a at some point there was a secret file in there and you know one thing to be very aware of is even if i um in fact let me show um let's create a super secret file and my secret is i don't like bananas i don't want anybody to know this right but let's say you know it was a currently um uh private repo pretend and so if we put that into github because it's fine it's all private and then i push that over to github.com and then later on i say oh okay i want to actually make this a public repo so i need to delete this from from github so i'll get rm that file go move secret and like okay now i make my repo public everything's fine nobody has to know that i don't like bananas and then i can check on my repo and okay my super secret file's not there but remember connects let's go back to the world as it was oh it's here in my history right when you remove things from github it removes it from the current commit but it's not changing history so people could still find out my secret keremy i just um i just noticed there as well that was a good example when you look at those commits of the um the identity issue we were just talking about before because on that commit screen you had some commits that were verified because you will have had an sshk that was tied to your github email we see you've got those first two commits there are verified and then the latest two aren't that's because you just created a new key so that's a bit the key one have had the same email ideas you first one so that's uh that's an example where especially like if you are trying to make verified commits if that's important to some project you're involved in um yeah that's where that'll pick you up so i just saw that i mentioned that never been of interest in my projects i guess i never thought about it but yeah so this one was actually yeah because you know anybody could create a dot git config file that says i'm minus 12 volts and push and it'll say this is a commit from minus 12 volts um it won't say it's verified um yep yeah um okay so um let's put a notebook in here so um i can run jipitelab and i think we created an alias last time jl um and i pointed out that at this point it's it's you know this terminal i can't use it anymore because it's busy running jipitelab now i could run another terminal session in windows terminal um but i actually never do um i actually always use instead something called tmux tmux is something which actually runs inside your terminal so regardless of what operating system you're on and what your term preferred terminal is you'll always be able to use tmux and let me show it to you if you type tmux um well the first thing i'd mention is if you type tmux it might say command not installed um and if it does say that then in um linux you can type pseudo and pseudo um if you don't say what user to run it is it says run it as an admin it's called root route so so so so install software you have to be root so pseudo apt install means installed in x software or ubuntu software tmux and so that's how you would install tmux if you got that error and so to run stuff as root you have to put in your password and so in my case i already have tmux okay um but yeah so that's that's what you would do on um mac you would normally use brew um which unfortunately does not come with mac so if you as it says it's the missing package manager so if you just copy and paste this into your terminal and mac you'll then be able to should be able to do brew install tmux if you double check that it's available yep it is so brew and apt uh equivalence for mac and linux and remember when i say linux i'm including windows is linux because it's it is linux so once it's installed if you type tmux you'll get a deuce screen that looks exactly like your old screen but now it's got a green bar on the bottom um and this is what tmux looks like and it behaves the same way as usual um you know one thing is if i kind of like go off the end of the screen it's nice i can use my scroll if you got this mouth set up um but you know basically just look like a normal terminal where things get interesting is that i can add additional windows um and so in tmux everything um almost everything you do tmux um starts by pressing the uh key the keyboard shortcut control b control b is the tmux shortcut and so let's say i cd into git and i run jupiter lab i always like to run it from the place where i've kind of got my notebooks and repositories and i'm like oh okay what do i do now well i'll create another github window uh sorry another um tmux pain i should call them tmux pain um and i can create another either split them horizontally or vertically so if you hold it hold can hold down control press b nothing happens and then press percent so control b percent and you can see what that's done is it's created a second window over here as opposed to control b double inverted hummers which creates another window down here the pain and you can close them in the usual way and remember the usual way is control d and each time you close them they just disappear okay so i pretty much always do that um now then how do you move around between these different pains um depending on how your terminal is configured you might be able to click with your mouse i never do um i just press control b and press arrow keys control b right control b up see how my curse is moving here i am in the bottom right control b left i'm in the bottom left control b left up now i'm in the top so that's how you can move around between the pains and then another thing to know is um this window looks very small now this pain looks very small i'd like more room please to get more room is zoom with z so control bz so if i press control bz that makes that pain take up the whole screen and once i'm done you know and i don't want the whole thing to be maximised anymore i just press control bz again and now it goes back um okay yeah Jeremy what how did you get the four by four right so um so we got again so it's let me get back to where it was so um i'm going to first of all split vertically so that'll be control b double quotes sorry control b percent and then i'm going to split the one on the right um uh up and down so control b double quotes and then i press control b left to go to the left hand tab the pain i should say and then i'll go control b double quote again and there you've got it and you kind of like there are things you can do to make that automatic but after a while you get so used to it that like i show you when i do it i just go control b percent control b double quote control b double quote and i'm done you know it only takes three seconds um and then the other nice thing about tmux is it sits there running in the background for as long as you like so i can actually detach from this tmux session as long as i don't turn off my computer by pressing control b d for detach and then i'll close down my whole terminal everything's gone okay don't have a terminal running anymore um oh that's going to be annoying to have to set everything up again get to the right directory rerun jibber notebook blah blah blah um but actually i don't because i detached from tmux so now all i have to do is attach to read tmux again um i do have to be the right person so let me go back to my extra account to attach to tmux again you type tmux a a for attach and everything's back so that is one of the very handy things about tmux and so if you have got some long running job or something it's totally fine you can detach if you need to and come back to it later um obviously if you read about your computer it won't work otherwise it should be fine i think there's a main yep yeah just to confirm if you close any of these windows that ends the process that's killed the process no i just closed the window and it didn't close the process but i detached first so control b d to detach and i closed the that it's all gone it's closed sure but i mean that at the beginning when you split into the four and then you close the three and then went back to the original the so for example the movie the jukey oh if you close if you close a pain yeah um so yeah so like the pain here i can't close it because it's running a program so the only way to close that would be to actually cancel the program this pain's not running anything so i can close it so i can just hit control d and so that just closes that session then if i do control b double quote it just creates a new session a new a new interactive login if you like so each of these windows are totally separate to each other so if i over here cd and to walk through too you can see none of the other ones you know these are all like separate copies of bash running this one i know if this is a copy over here is actually running jipita all right there may be one more doubt like can we assess each into a differentiation from t month literal yeah so um absolutely so i i you know i could SSH into my machine into my gpu machine from here um i need to be not jph 00 so let me just do that as somebody else yeah so i could SSH into another machine no worries you can even run tmux inside tmux if you want to get a bit crazy um yeah they're all totally separate um okay so let's so i got jipita running so i can control click on this url to open it up ah that's interesting so that didn't work because you see how it's wrapped to the next line so it didn't get the fa91 it's kind of not considered part of it um that's why this didn't log in correctly so what i could do is to um zoom in with control bz and then click on it there we go um the other thing you can do is to set a password which isn't a bad idea um but for now we can just use this it's because it's using this uh unique token that it already creates um okay so because i launched um jupita lab from inside the git directory that's why i'm here inside the git directory so here's walkthrough to so i could now create a notebook um turn that to a markdown cell so um i strongly recommend learning keyboard shortcuts um which what's the easiest way to see that in a lab i'm much more familiar with classic notebook so here's launch classic notebook which is what i normally use in classic notebook you can hit h to bring up the keyboard shortcuts um let's see how to do it and jupita lab jupita lab keyboard shortcuts advanced settings editor in the settings menu doesn't sound very friendly okay settings advanced settings okay that's control comma keyboard keyboard there we go all right great so anyway the keyboard shortcut to turn a um it's change a cell to markdown it's just to hit m and so this is now markdown as you see um or to switch it back to code you press y and that's now code um another useful keyboard shortcut is you can just press one two or three to create a first level second level or third level header or change one to one to a header as you can see so so walk through sample notebook here is how i calculate one plus one put things in backtext to mix to say this is just download as code here is how i calculate so if you hit shift tab after typing a function it'll tell you the parameters and so forth of a function a equals array 1.0 comma pi over 2 whatever so okay okay so by default things get called untitled.ipandb which is not a great name so you can rename it to sample whatever now if i close that um it's actually running so that that that Python session is still in memory most of the time that doesn't matter unless it's something where you're like training a model on a GPU in which case it continues to use your GPU memory so a couple of things you can do one is rather than closing from the x you can click um close and shut down notebook which is control shift q um or alternatively you can click the x here all right since we've got a proper terminal on our computer we don't really need to use it much but if by i you know and we will use it later you can create a terminal inside your browser which is identical to the terminals we've seen before and just like before control d will close it all right so we've now got um another file called sample.ipandb so we would like to put that into our github repo for other people to to share and just so i put it back up and so it's version control and so forth um so everything you want to do and get your first type get um so what you'll often do at this point is type get status which tells you what's in get and what's not in get and so it'll give you a list of untracked files these are things you haven't yet got in get so to put it in to get you have to commit it um so if you type so if you type get commit um that'll commit anything that you've added to get so first of all you have to say okay what do i want in my next commit i want sample.ipandb so get add sample.ipandb i'll zoom in okay so now this is a it's not untracked it's now a change to be committed is the we've added a file um so now we can commit what we've added by saying get commit and then it'll say okay tell me your commit message and so by default it's opening up an editor called nano um and we can change this but nano is probably like the easiest editor to get started with um so it's not a bad place to start um so let's put in our commit message for people to see what have you done are we added sample notebook and you can see down at the bottom that we can exit by pressing ctrl x and it'll say do you want to save and i press y for yes and by default just leave the file name as it is so hit enter okay so that has now added the file to my commit so if i now say get status it's now in a third place it's gone from untracked to do be committed to be committed and it is now committed and that means it is now actually version controlled on your computer so get actually version control things on your computer even without using github um in fact originally when get was created by Linus 12 volts there was no such thing as github and people kind of sent changes to each other directly rather than going through a server but in this case we are connected to a server and it said oh your your branch so your copy of this repo is ahead of the copy the place that you got it from by one commit so use push to to send your commits back to the server so get push there we go um so now if we do get status again there we go so that's the whole cycle and so if we now go back to github there's our notebook and github does have a basic notebook viewer it's not amazing but it does the job most of the time and so there's our notebook and so here's like a really minimal way of like it's not a blog or anything but you know to just like quickly share things with people this is the easiest way to do it you know and you can just say here's here's a repo and you know you can create as many repos as you like um so like don't feel like it's in some way inappropriate to create a repo for one or two notebooks you want to share with somebody it's totally fine um you know I generally have kind of a repo I put somewhat temporary things into but you know often when we're kind of sharing something with somebody else for example the bug we found we want to show how to recreate the bug where it is like create a repo just to send somebody an example of a bug for instance so yeah so repositories you can create as many as you like um a really good way to use repositories is let's go to the fast book repository is it would be nice to have your own copy of the book because you would like to run cells, edit things stuff like that so um if you clone this right you won't be able to do an SSH clone at all because my because your public key is not in my account you can HTTP clone it but you won't be able to save changes back to github so ideally you'd like your own separate copy of this and so you can create your own separate copy of this by clicking fork and so fork's going to create your own copy so you just say create fork there's a fork's a copy and you can experiment with changes without affecting the original and here you go so it looks exactly the same right but now I can there's a SH copy this and then cd so cd dot dot means go to the parent directory which in this case is get get clone paste um actually ash yeah no that's fine yeah so we'll go get clone there we go and so now it downloads the the whole book and so now if we in fact let's do it let's open up a notebook so let's go back to jupiter lab fast book and nest basics actually you know what would be good would be let's go into the clean version because this is really the one you want to be experimenting with and so I can now start running cells oh can't run fastai fair enough so at this point we need to install fastai so we can see here it says kinder install minus c fastchan fastai so I'm going to copy that except for the kind of it so when you use mamba so so my the c remember says to bring it from some other channel so this is not coming from the main channel but from a channel called fastchan so fastchan is a channel that fastai provides where we try to put in you know a lot of the kind of pieces of software that data scientists are likely to want to use okay so we can now say yep that all looks fine so fastai relies on the kind of the whole you know kind of ecosystem of python scientific libraries and since this is a brand new user you know things like matplotlib that's used for plotting for example and psychic learn that's used for classic machine learning then none of those were there so because it relies on all these it it grabs them all and downloads them and installs them can I ask a question while it's downloading please um is you're I noticed you're installing it in the base directory is that usually how you do it that's how I always do it yes but you don't create separate virtual environments never never like okay a lot of people do but I strongly dislike them particularly for beginners or unless you've got some very special reason I always put stuff in the base okay and the other thing I noticed was that the notebooks all use hip yes they do but it won't do anything for you because it says here see if there's a this is a bash thing it says see if there's a directory called slash content which there isn't this exists for something called colab which is a free Jupiter server environment which doesn't generally have up to date things installed in fact I think they still have fast AI version one so this cell will on colab install everything because colab uses hip basically but yeah what do we want to think on our computer and we also need fast book now fast book I'm not even sure I'm not sure if there is a kind of package at the moment for fast book so I will use well let's check mamba install minus c fastchan fast book I don't feel like that won't work apparently it does work there you go oh that was easy and actually fast book includes fast fast AI so we could have skipped the whole fast AI one fast book is just a it's basically just a list of dependencies of like all the different things we use in the book it doesn't really have much code at all of its own it's just a kind of quick and easy way to grab all the stuff that you'll need for the book all right so now we should be able to run this okay that is actually I think a little out of data I think we can use any sentence piece nowadays and I think we might have that in fastchan to sentence piece that's something we use in the nlp chapter yep looks good good wow that's a slow download that's beating up at last let's try again okay so now we've got a copy of everything we need so this is like a unusually you know big kind of set of dependencies because it's a big book that teaches lots and lots of things but the nice thing is once this works you know you'll generally find everything you need is going to is going to work okay so at this point you know I've started doing things you know maybe I'll make some notes to myself to install we have to go member install basically this is all we'd need would be member install minus c firstchan first book sentence piece that would actually be all you would need to do so if I save this and so now you know we've created a note to ourselves in our own copy of the book so we'll close that and if we now cd to first book get status you can see it tells us we've modified that file so we would like to save that back to our copy typing git add and then git minus m and then changing things in the editor is a bit slow so a shortcut is if you type git commit minus am that minus a means add everything that's not committed and this this m here says I'm going to put a message right here on the command line it's got to be in courts um change mnest maybe add install notes so at that point if I type git status you can see now it's going to head and add it and committed it and it now says all right we're ready to push so if I take git push that's saying to save that change so that change has not been saved to fastai's copy of the book of course but it has been changed saved to the jph fork so at this point my fork is one commit ahead of fastai right so that is i've made changes that are not in fastai's copy and so I could see what commits there are and that and here's all the commits that are in the what I've forked and here's my addition and here's the change which is that I added this one cell okay I think that's probably about enough for one day does any have any questions or comments about that? um the only one I've found was that sometimes if you sort of we started off creating a repo within github sometimes I've done the reverse where I've created the repo on my computer and then had a few issues trying to get it into github and yeah okay well let's add that to a list of things to do in a future session I find it easier to do it in github so I actually always try to do it that way like literally like because I find it so we like I always have to look it up to remind myself how to do it otherwise so often I'll like I'll create it in github pull it and then copy over things that are on my computer you know like that's a really lazy way to do it but let's do how to create get repo locally all right let me pop that all right thanks kang so we're doing Tuesday Wednesday Thursday Friday this week so see you tomorrow thanks for joining us and to rock today so bye thanks forCC
