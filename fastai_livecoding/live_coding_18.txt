 I don't know if you saw, but somebody on the forum, not just somebody, somebody extremely helpful and kind being Daniel on the forum, he does these summaries of the walkthroughs. I saw that, Jamie. I tried to do a little bit, but I think I didn't have time to finish it off. Oh, yeah. Okay. So did you want to maybe share your screen and get us up to speed with like what the problem is with solving and where the data is for it and stuff like that? You're muted, by the way. Sorry. Yeah. Actually, it's just what was in, I think it was the 7th, 13th, like coding. Live coding, which one? Live coding. Live coding 13. Live coding 13. Okay. Yeah. Yeah. So I basically, I kind of had a really janky solution. It's not, it probably doesn't work, but what I was thinking of doing was like putting them in some kind of like a file side by side and then sort of indexing it, but I actually didn't do anything, but I did is basically this at the end. Uh huh. Okay. So, so I'm not quite sure how to take it any further. Yeah. I don't even know what it is yet. So let me just, okay. So I've got my screen sharing here. And so, can you guys see that? Okay. So where do I start? So he. I didn't quite understand, like, um, the animation on the forum. Yeah. Okay. So that's basically like, if you get that note at the end, he's got all the images. Yep. Right. So these are kind of like the, at the end, he's got the actual images in, in, in that dropdown. And what I did was I actually went in there and I looked at the code or what the HTML are. And are these meant to be in the same order as. Like, do they have names or I just, I don't think so. I don't know. The same order. Let's see. So this is, this is called ad to actually hang on. What we could do is if we click edit, right? That's right. Yeah. Oh, I see this is like, got off the edge of the screen. And so let's see. So these have, ah, okay. These have names. Okay. Cool. Like add to class. And then presumably there's an add to class somewhere here. Um, let's try searching for that. Add to class. Yes. Oh, that's cool. And then the sizes are different a little bit. And this is in double brackets at the end. So I wasn't sure what kind of, um, regex would do that. But I think the one that I got, it kind of, it just kind of captures. So what I did was what I actually did was I went to the bottom, I took all of the ones from the bottom and then I got rid of the, um, I just extracted that. And that's about how far I. Okay. No worries. All right. Um, let me just start up to you put it then. Okay. All right. So this is our. This is our kind of source images. Okay. So you guys know if you put things in triple quotes, then it, uh, creates a multi line string. Okay. And so then we've got our destination. Okay. I guess which is everything else, right? Destination. Okay. So there's a good start. We've got our data. So like, I guess like, um, the reason I thought this might be interesting to do. Um, here is basically. Um, yeah, people often ask like. How do you go about actually solving a problem or doing coding or whatever? So I thought I guess if we do it together, then. We can go through the process. Uh, which will work a lot better if you. Yeah. Ask questions or add comments, you know, as we go, obviously. Um, one thing that does occur to me is in this notebook, actually, this is, I find quite this is quite awkward to have so much data here. Um, so what I might do actually is instead put them into, into, um, text files. Um, so this one is the source, right? So in bash, um, if you type. Cat. And read, and then this means redirect to a file, right? So we could create a file called source.text. Um, it's now reading from standard in. It's reading from the input, right? So I can paste. Like so. And then to tell, um, basically in Unix to say, I finished this file, you hit control D. Okay. And so if I was to now, Vim, that, you can see it's there. Okay. So that's how you can quickly and easily, there's lots of quick and easy ways to create text files and, um, way, way Jeremy. So I got completely the problem because there was this gift thing and I thought, wow, get the, you know, and it's just a name of the directory. I mean, yes, yes, yes. I figured it out to post. All right. So it's just right, just, it was just this less than sign which pipes it's the greater than sign. Yeah. Yeah. Great. Yeah. Yeah. So the main thing, I guess the main, like just to put this together, if I just type cat. Right. And then I type text. It just. Prids out whatever I type it. Okay. So that's what cat does. The reason it's called cat is actually concatenates things if you feed it multiple things, it adds them together. If I, uh, I can redirect from a file, which means instead of me typing things in, it'll, it'll get its input from a file. So that would cause it to print it out. Or if I redirect. It's output, then whatever I type in will go to the file. So one way to copy things, for example, would be to read things into cat. And then output things into something else. Oh, I can really dumb way to copy, but that gets, you know, does the job. Right. So yeah, cat just to anything cat bring gets into standard in. Goes to standard out. Standard in being the input to a Unix command and instead of out being the output for a Unix command. So if you do cat greater than. Finally, it will still let you type in stuff. Right. So that's what I did before. Right. Is I. Pasted. And then at the end, I hit control D. Right. So now if I cat and take it from that. Oh, yes, dear. There's, but I just typed. Okay. Control D at the end. Control D means end of file in Unix. Yeah. So if I, so let me move you over here. Yeah. So if I hit control D at the end, that's that, then it says, oh, you're all done. You might have seen something similar. Like. I think it's like this. Yeah. That thing I know. Okay. And at the end, you type whatever you typed. So like, but there's no reason to do that. You can just, because you could just use control D. Cool. If you use this double. Less than side, it means keep reading until you see that string. That's quite a here. This is the mystify. Yes. Yes. All right. So let me show you that again. So I'm going to do it again for my destination. Right. So let's grab all that. And by the way, knowing how to do things like select to the end of line and select to the end of file and stuff like, you know, using command and control and shift and end and home, that stuff's really important to know. Get varies between Mac and PC. So if you don't know how I just selected all that, then it's definitely worth. Googling that. Okay. So I've just copied that. So I just want to put that into cat redirect the output to destination.text. Right. Paste. Control D. Control D. Don't know why I had to press it twice there. That was strange. Maybe I had to hit. Anyway, did the job. Okay. So actually. So I guess like my starting point normally is just kind of like input, import my like. Standard set of things that I wish Python had, which is called fast port.utils. Oops, import. So as some folks have pointed out before some languages have things called a prelude, which is like the. The kind of stuff that. People like to always have available. This is kind of my version of it with a prelude. And. One of the things it does is it imports some things from the standard library. Python standard library that I always use. And it also imports some things that fast core adds to the standard library. So one of the things that adds is. Path lip.path. So. Okay, like so. And so path lip.path has a. Retext. Okay, so that's better. One thing that's I don't particularly like is that the standard representation of strings and she put a users backslash and. If you want to replace it with actual. You can say print. Or you know, like you can just. Do this. And so just remember curly brackets. So this means do this is a bash command. And curly brackets means read this Python variable and put it into the bash command. All right, so then we can do something similar for destination. One thing that people complain about with. With my code quite often is my use of abbreviations like. You might reasonably ask for one at least but they're either and it's just totally fine. You could put the either but just to explain. I quite like to have. Similar things be similar lengths because it makes it really easy for me to then like have lines next to each other that operate on those two things. And L the bits will be in the same place and so my eyes can immediately see if there's some unexpected difference or something. So it's not just me being. Trying to be difficult. It's, you know, there's actually a reason that I quite like doing that. Just not to say everybody has to do that. I just, that's why I quite like to do that. And there's also something to be said for like. Having a standard way of coding. That then you just don't think too much about how you code. You know, so like I just have stem standard way I tend to name things and then I don't spend time thinking about. Naming things too much. That's cognitive load. I can focus in on solving the problem. All right, so. I guess the first thing we might want to do then is we basically. We probably want a dictionary that goes from the name of the thing to the. To the location of the image right. And so then basically then we'll just go through each type, each one of these here and replace the name with the value of that when we look it up as a key. So. There's a thing called find all. Which you give it a red jacks and it finds all the places of that red jacks. Do you guys tend to use red jacks is there anybody here who doesn't really use red jacks is or. Not too much. So yeah, so red jacks is so. What we call it a DSL domain specific language. They are. Yeah, they're not Python really. Python happens to have support for them, but they very much don't look like Python. I actually tend to think of them as a notation and notations one of my favorite topics and notation is. A way of representing some potentially complex. Domain. In a concise expressive and flexible way. So for example, a notation that you've definitely used before. Is this one. Right, which is called math notation. If you play music in the Western tradition, then you will have seen the staff based music notation. If you juggle. You might have come across the juggling notation. If you've done quantum stuff, you might have come across the fine man diagram notation. So notations are. Yeah, they're expressive ways to represent things and red jacks is a rotation for. Yeah, for finding stuff in text. You know, not many. Honestly, things in computing have got to the point that they're so. Well understood and studied that we've. Got them to the point that they are a notation. But red jacks is one and my view is often, you know, quite most of the time, perhaps when when something has got to that point, we should learn that notation because it's like a way of like composing things together very concisely that can solve a wide class problems. Jeremy, would you recommend. Would you recommend learning things like all can said also long term. I wouldn't recommend all can said I would recommend pill because pill is a super set of all can said. And as such, it's more expressive than either because you can combine everything from all and said and find and. And pretty much everything from Python as well. So yeah. At some point in your life, it's well worth googling for pill one liners. And diving into that rabbit hole. So another nice thing about red jacks is because pills red jacks is for so good, they were built by a linguist, you know, Larry walls is not surprising perhaps that they used almost everywhere. So JavaScript, Python. So they're all used by the PC re library, they all use the same red jacks is. So, I have a very good code which is almost identical to Python and pill which is called the very magic mode. So, I'm not sure if I'm going to ask you a question about like 20 minutes into this. I was near last time. So, what are we trying to do? Yeah, this is not a from last time. This is what we're trying to do is something new. So, so what we're trying to do. Thanks is Daniel creates these, these nice descriptions of everything in these sessions. So, I thought it would be nice if we could, for him, make a script or something that would allow him to put the correct images in here. I don't know why it comes out this way but that's fine he's got a process he's happy with. And in this process the images, and up, you know he's he can easily paste them all at the end. Right. So he's images. Okay, so the images. So they have names. Right. And then in the, in the, in the forum post they appear like this. So we have to replace this basically with, with this, but with probably with this size would be my guess. In fact, let's just check that. So, yeah, that's what he wants, I guess fixed test error. I wonder which size he wants. Okay, so, script for fixed test in source path. 690 by 184. And where was that fixed test error? Okay, that's at the end. This donation path. I wonder if these are the actual sizes. Did he, that's several of these say. I think these are the actual sizes I'm not sure why it has the 900 standard size or something. It seems to have like. Presumably that's what he wants. That's presumably the size he wants. I guess. Let's have a look. So if I copy that. This post is to test image stuff or Daniel. Okay, so that's the size that appears there. And then what if it says 900. Oh, doesn't really make any difference. Yeah, without this well. If you were to try it without the tools to work without. Oh yeah, I would work. I just think like he's, I assume that some of the images he's intentionally trying to resize. Something. No, maybe this is for his notes up. Oh yeah, I mean he's got two different sizes. One of them is for his notes up, I assume. And one of them. I'm not going to assume this is the size he actually wants. Maybe it's already as big as it can show. Yeah, I guess I think so. If you right click and open it in a new tab, would that. Or would that just show the original image. Let's have a look at some more. Oh wait, does it always say 900? Oh, some of 1200. I see. I think all of the x by y is the one when he drops them into the interface and it just takes whatever the site. I would say so. So I think this is probably, let's assume this is actually what he wants. I think that's a reasonable guess. Okay. So I can say sometimes I just judge, you know, grab bash commands. But I'm fiddling around just because yeah, sometimes I don't know. It's just like. That easy way for me to quickly check things. So grip. So actually, grip doesn't take normal red jacks is, but you can. And I need to get into a habit of doing this. Yeah, you can use minus capital P. To use Pell compatible regular expressions. So when you're looking for like, can I use normal regular expressions specifically, the thing you generally want to search for is PCI rate. They're called Pell compatible. So apparently we can do this. Not that it'll make any difference in this case, but no, this one. Okay. What about the grip? Nope. Okay. So that maybe it's in some more recent. Oh, you know, maybe the best thing is not to use a grip instead to use RG, which is a grip grip. Which I guess I have to install. I noticed that is that a different version of grip that you use. So RG is like, so basically like for pretty much all the classic Unix tools, somebody's rewritten it in in Rust and made it better. Or C++ or go, you know, increasingly it's Rust. I don't know what grip grip was written in, but like it's basically like in this kind of general category of like better versions of classic Unix tools and I try to like. Get into the habit of using the newer better versions, even though it takes some retraining. So yeah, RG is. I'm into a book right yesterday because I noticed you were using that and I thought maybe it's for recursive grip or something. Oh, yeah. Yeah. Yeah, it's, yeah, it's actually a program, which amongst other things seems to be highlighting the thing I'm searching for, which is cute. And showing the right line number. Jeremy, you find that brew install doesn't mess with your number for installation and those are phenomenal. Pretty much in their functions. No, it should be fine. Yeah. I mean, I'm not in paper space here. Right. So like I wouldn't use I tried filling with brew in paper space, because there is a Linux. I mean nowadays, that's okay, but it uses up a lot of space. So I thought just using man better install binaries like ripgrap in paper space is probably the best option. You know, because it doesn't use any more space than necessary. But you know the two shouldn't get in the way. Like they'll both add themselves to the path right so opt home brew bin. And before it's been so they're just both in the path. Yeah, I can't see why they get the way of each other. Okay. All right, so find all. Docs for a patent in a string, right. So, so, you know, I tend to like to like to create like a really simple version of something just to make sure I understand the command before I. Dive into it. So I reckon we should be able to find the word fix. In our source. Right. And there it is. Okay. It's appeared more than once. Okay, there it is. Right. And so then. If we. Generally with red jacks as we use backslashes quite a lot to mean certain things. But Python uses a backslash to mean something else, which is that the next character is a control character. So to tell Python that treat backslashes as backslashes, you put an hour before the string. So this looks for the, you know, backslash F fix test in fact, you know, if I just show you here. Backslash N is normally a new line. But if I put an hour there, it's not a new line. Actually, this would be easier for say print. So that prints new line fix test. And that prints backslash N fix test. Okay, so we're going to look for stuff of. This for that's our source. Right. So I would be inclined just to paste it in here. Okay. So square brackets have a special meaning in red jacks. So we can use a backslash to say don't use a special meaning. Did I with pipe. Did I with parentheses. Let's get rid of all those. Okay. And so, so this is going to be the name of something. And so if we want to remember some block of text, we can put it in parentheses. Right. So, so the thing we're going to try to find here is basically, I think probably anything that's not white space will be fine. And then this is actually something we do want to keep, which is the actual file name we're going to end up with. So I'll create parentheses for that and put my backslash S plus there as well. Okay. So that's looking pretty hopeful. So what it's done here is. Found equals. Found 29 things. Which looks something like this. Oh, I put parentheses twice here, which is why it's appearing twice. That's better. Does that make sense so it's basically showing us each of the parenthesized expressions. And so actually we don't need this bit to be parenthesized because I don't think we care about the original size. Okay. And so we should be able to create a dictionary from that. Because we've now got a list of tuples. I never quite remember how this works, but yeah, there you go. So the list of tuples, if you pass it to dict, it'll create a dictionary. And I think like there's something to be said for programming in a interactive environment, you know, that allows us to like gradually build up a thing that works. And then, you know, assign it to a variable or stick it in a function or whatever. So now we should be able to search for found add to class. And we do. So we've got the dictionary we want to set makes sense so far. I just have a question about that you got rid of the size. So if you don't put the parentheses does that mean it will just ignore that. Yeah, it has to be there. Right. So if, if we said, oh look for a a. Well, that's not there. Right. So it won't find anything. So it's still searching for it. It's just not storing it. So it's finding an exclamation mark open square bracket. Finding and remembering a bunch of non what space characters followed by a pipe sign followed by a bunch of non what space characters which it doesn't remember followed by a closing square bracket followed by an opening parenthesis. So putting parentheses makes it remember essentially correct. Correct. Correct. It does two things. It also groups things, which is a bit confusing that it does two things. But yeah, in this case, the thing we're using for is the fact that it remembers things and will end up in the output of the file. Among many other things, if you just do ari.match or ari.search, it'll also remember them. It just returns slightly different things. I read find all is one of the easiest things to use those, though. So I think it's good. Okay. So now we need to basically search and replace in destination. Looking for stuff like this. Okay. So. So this is our destination. Okay. Here's two things we want to change. Right. So I'm just going to like use the last few characters just so I can see what's going on. So just going to put that in a variable for now. Okay. So there's a thing called ari.sub for substitute. It's funny. A lot of Python programmers complain about me using three letter abbreviations, but Python apparently is allowed to use three little variations. Ari.substitute. So we're going to find a pattern and replace it with something else. And we're just going to search in sunscreen. So for example, if we replace space with star in D. Okay. That's basically how it works. Or you can search for regular expression. So let's search for that. Okay. And again, we're going to use our because we're going to use backslashes. We're going to search for a literal square bracket. We're going to search for a little pipe literal vertical bar. Okay. And you can see that's been replaced with a star. And so this thing here. Is the file name. And the bit before the dot is what we're going to look up. So I'm going to. So we're going to capture this. And the thing we're going to look for is everything except for a dot. Okay. So to say everything except for a dot, you've been square brackets, you put the things to look for. And carrot means things you don't want to look for. So this is everything except a dot. And this says to capture it. So remembering, I got it remembering is actually called capturing. Dot has a special meaning normally, which is anything at all. So that's a literal dot. Let's not assume it's all not. Maybe it's not always PNG. So I'm just going to see any three characters. In fact, regardless of whether it's JPEG or P and oh, here we are. It could. Oh, it's also sometimes it's JPEG could be four characters. Okay, no worries. Okay, well, anything could do. Oh, I know we can just do some letters. So backslash w is a word symbol. So basically letters and numbers and stuff. So we'll have a bunch of those. Okay, now interestingly, in this case, this has got a pipe 900. This has got a closed square bracket. Okay, so there's a few ways we can do this. I'm going to show you. Okay, I got to show you the more interesting way. Which is that. No, let's do the simple way. Okay, so the simple way is rather than looking for any word symbol looks just look for anything that's not a closed square bracket. So this is going to be slightly confusing, but basically. This is a red jacks that searches for any A's or B's or C's. This is a red jacks that search for anything that's not an A or a B or a C. This is a red jacks that searches for anything that's not an open square bracket. So we want to find. A bunch of things that are not a square bracket. Plus means one or more. And then there's going to be two closed square brackets. Okay, so that didn't work, which is good because now I can show you how I go about debugging these things. So to debug these things is I would just gradually make this simpler and simpler until it starts working and that way we'll be able to figure out why it's not working. So I'm going to delete all of this. Okay, so that didn't work. So let's keep deleting. Okay, so that one did delete. Oh, okay, I see the problem. So you can see here it's just replaced the first letter, which wasn't what I wanted. Right. I wanted to grab a bunch of these. So this here says, oh, this here says anything that's not a dot. Right. But we actually want one or more things that under dot. That's better. Okay, so one or more things that under dot. So we can go back and now replace that up here with one or more things that under dot. There we go. So that's now successfully replaced. All that with a star. So that tells us that we've got our search working correctly. What confused me is the current in the square brackets. Because I know that the current is a simple for start of line. Oh, yeah. That's true. So I had to Google it and it turns out that. Inside the square brackets. It means not. But if it's outside, it means start of line. Yeah. Yeah. No one's going to claim that necessarily this notation is spelled the best. I guess. It was made pre Unicode. You know, so it had to rely only on ASCII signs. And so I don't think there's enough ASCII symbols. So it ends up having to reuse ASCII symbols in ways that are entirely incompatible with each other. Yeah, that's correct. So if it's not inside square brackets, it means that offline. If it is inside said brackets, it means the complement of the set, the opposite of the set. The dot. The dot which is inside bracket. Don't mean any character. No special character. Yeah, that just means a dot. And I think in square brackets, except for except for characters literal. Yeah. So you could do this to make it extra clear. Yeah. In the chart, I shared links to bite.org. Which is, which is nice because it has a cheat sheet. So whenever I'm working on a rejects myself, I never remember. This is based on Robillard that was very famous in the Ruby world. It's nice for testing your rejection. But also if we expand the cheat sheet, which is. Yeah, then now you put a string in your test string. It will, and you can put a couple of strings there. It will, you know, show you what it's doing. That's how I figured out the. The red text. I went to one of these sites. And then most crucial bit here is the regular regular expression cheat sheet. When you click on it, it expands. And you have all these things that you can use. Yeah, I think Rick checks. One I wanted someone I've tried before. Which I think has a bit more of an explanation. You can remember correctly. So I like this that. So you've got the quick reference. But you've also got this like explanation matches this character matches the character. So a capturing group. That's something that remembers is a capturing group. A single character that is not one of these. Oh, yeah. Yeah, so the first like. Learning a notation is hard, you know, and so like. Almost almost any notation people don't as a matter of course learn at school. It generally gets categorized into the. Weird complicated annoying thing category, you know. But there's nothing like. More or less weird or annoying about red jacks than. Basic arithmetic notation. It's just isn't something we're going to school, you know, and it's. Yeah, you know, arithmetic takes us. Some years to learn red jacks. Has anybody learned red jacks recently? You got a sense of how long it takes to learn like days, months, weeks. First time I started using it, I think it was actually last year's a fast. Of course, where you introduced it. Yeah. And yeah, I always saw it before and I thought it was kind of like, you know, these weird simple that never understand. And then basically I like got a basic understanding of it. Really useful tool and then base every few months when I have to come back and use it for something. I just use one of those like online red jacks tools to kind of like give myself a jump start to get back. Yeah. Yeah. I mean, it comes up so much. It's like, I would say it's notation worth mastering. You know, which I wouldn't say about that many things and mastery requires. Probably some fairly intentional practice over a period of time. Yeah. But yeah, certainly the kind of like. Use it from time to time and learn a little bit more each time also also works. So I got to show you something which I would guess most Python programmers don't know, but which is amazing, which is that this thing here, the thing we're replacing it with star doesn't have to be a string. It can be a function. So here's a function that returns star. And that does the same thing. Right, or return, we got to be at past the thing that's being replaced. So, you know, just, I mean, one thing we could just do is just print that out. Okay. So we're getting past an re.match object. And so, and I read that match object. We can also get. I think, or is it only me? Can you guys hear me? I'm not sure anyone. Oh, sorry. My computer did something on its own. It's a bit weird with audio. Sorry about that. Okay. So I think to play with a match object, we should probably try and create one. I think if we go re.search, we'll get a match object. So let's search for that pattern in that string. There we go. So there's a match object. So hitting dot and pressing tab isn't a bad idea just to see what kind of stuff we can do. That looks nice. Groups. Oh, I didn't do anything. So there's groups and group. So group is something where you give an index or name. And so zero gives you everything that was matched and one gives you the first thing that was captured. So that's actually what we want, right? So if we. Yeah, did. Return. Star. X dot group one. Star. Okay. You see what's happened there? So again, I'm doing a lot of exploring and explore, you know, as I go. And so like I don't like I find using this approach. I if I'm working with my code, I basically almost know I basically never get stuck. Because every step I'm doing is so small and it's from a known place. You know, and it's a small increment. And I'm kind of keeping most of the steps along the way. So it's really, yeah, it's very hard to ever get. Lost or stuck. So, yeah, so now what we have to do is look up. The thing in found, right? So. Found. There we go. Okay, so now we've got to put it in the right format. So actually. Yeah, we basically. Yeah, this is interesting. We actually want to keep this bit, right? If it exists. So. So what we can do. Yes, we want to keep that bit if it exists. So this thing here where we're searching for. Anything that's not a square bracket isn't quite what we want. I think we actually need to specifically find the extension. Right, so we're looking for. We're looking for a full stop and then an extension. Okay, so an extension. Is. A bunch of letters. Right. Is a bunch of letters so backslash w plus. Strictly speaking, it should be three or four letters most of the time, but that's okay. What I said backslash w plus right and then next up to that is either going to be a closed square bracket or there's going to be pipe followed by a bunch of digits. So in other words, there's going to be optionally pipe followed by a bunch of digits. And I want to keep that because we want to put it in there if it exists. So we're going to look for. Pipe followed by a bunch of digits backslash D is a digit. Okay, so we got to look for all this right now to say that that is optional. Use question mark. And so I'm just going to change this to zero just so we can print out the whole thing to make sure it's working. And we don't want to do that anymore. Let's see. Okay, so it seems to have worked right. And in fact, what we could even do is just say. Print out the groups. And that way we'll see. Okay, it's got fixed test error pipe 900. And fix issues none. So you see how the optional thing is coming through as none here, right. So what we want to do is then look up group one, right, which is this. And then if it exists, we then want to put in the pipe 900. Okay, so which is x dot group. Two. See, there's a non inside square brackets. Found x dot group one. Oh, and that's, oh, that's the end of curly brackets there. And start curly brackets there. There we go. Upload, blah, blah, blah, up here and g 900. Cool. And so then this string is going to start with exactly the same thing we had before. Which is that. And it's going to end with two square brackets. Okay. So we get rid of our stars. How does that look? We have extra non at the end. Okay, we do. Slightly annoying. So, or is a Boolean operator. Which returns the thing on the left if it's true. And the thing on the right otherwise. And so because none stringifies is the name, the string none. But it also is also considered falsey. So this will turn none into an empty string. Okay, well, let's try that on the whole thing. So one easy way to, you know, when you're doing something on a subset, change it to the whole set is you just go delete. Like so. All right. So we've got a key error, which is understandable. So we're missing good mix. So let's see if that's actually missing or not. So let's have a look in the source and search for good. Okay, there is not a good mix. So what I'd been trying to do then is change square brackets to get because get let's us provide a default. So let's use that as a default. All right. So let's see. Okay. So let's see. So let's see. Okay. So let's see. Okay. Okay. And say if we found it. And do that. That way we'll actually be able to see it. Oops. Oh. Okay. So let's test it. Okay. Okay. Okay. Okay. Okay. Okay. Okay. So that's not correct. It's exclamation mark. Square bracket. I don't really know what the name is, but I guess. And then. Oh, and then the. And then the size, if there is one. Interesting. Size, if there is one. And then close credit and then a parenthesis and then the file name. Okay. Is that right? Oh, I've got an irie dot match object. Oh, it's. Oh, yeah. That looks better, doesn't it? Okay. Paste. That looks helpful. Okay. How about that? How about that? Yeah. Some of these are too big, but Daniel can easily change. I mean, let's test it actually. So for 3333. Let's see if we can change the size. Is that work? This course. Image size. Oh, comma. I don't know. Was that a bracket in the comment? A bracket in the comment. Sorry. Yeah, I think it was. Because the next comment they say just by adding. Adding, 20%. You're still right there. The pipe in there. You think so? Yeah, the end, but he's like a quick, just. Yeah. Yeah, the last sentence there. Yeah. So that might be, you could just do just. The comma 50%. I assume after a bracket, maybe that would work. Well, and here it's got before the bracket. Oh, not the, um, the bar thing. Oh, the pipe. Yeah. Let's try. Yes. Okay. Maybe take the dimensions out. No. Ah. So. Oh, here we are. Oh, I think we probably shouldn't be putting in his sizes because they actually want to keep the sizes. So let's change it. So. If you press O, by the way, it opens and closes the output of a cell, which is quite handy. All right. So. I guess we've going to have two things. We're going to have the size and the file name. So that's fine. So, um, all we need to do then is to capture this. So, um, so it's not a dictionary anymore. And so then we could say found and we could do a dictionary comprehension. So for. Name, comma, size, comma, file. In that we're going to go from a name to a tuple. Of the size and file name. Okay. So. We're now going to go. X dot group. Okay. And so that means we don't need this pipe 900 bit anymore. So we don't have to remember that. Okay. And instead. We've now got. The name and the size, the size and the name. And so we're going to go pipe. Followed by the size. And then. And then. And then we're going to go. And then we're going to go pipe. And then we're going to go pipe. And then we're going to go pipe. Okay. Why did this one not work? Okay. Fix issues. Should have worked. Oh. Okay. So remember how I told you earlier that parentheses do two things. They both group and capture. So when I remove the parentheses, it stopped grouping. Which meant the question mark now referred only to the backslash D plus. So actually I need the parentheses there. Okay. That fixed that. All right. Okay. And so. Sometimes that's missing. So we'll call that res after all. We'll call that res here. Okay. Let's see how that looks. Okay. Nice. Oh, cool. So look at that. They've got names. And you can change their sizes. So that's a good question. I think we're done. Are we done? Yeah. Okay. Let's fix them now. Yeah. Okay. All right. So let's change is. All right. So, um, Next step. Is to turn this into an app. Okay. Okay. So which bits do we need? So we don't need this head. That tail. Don't need the RGs. Check this inside here. Don't need that. Okay. Okay. So that was. Cool. All right. So function. All right. So this is basically. Replace. Place image. Yeah. What that does. This seven cell seven applies the function to the DST. So that's a good question. It goes to the search. Yeah. It's going to look for this regular expression. And then each time it finds that regular expression will call this function passing in the match object that the regular expression. Gets. Thank you. All right. So this is like a very. You know, doing just about anything you can think of with text really. Search a regular expression and replace it with a function. Okay. So. If we have. Okay. So let's create our function, which is going to be. Fix images. Okay. We're going to be passed in a source and a destination. Okay. And this. If you haven't done this before, you might be surprised to discover you can define a function inside a function. And the reason I'm doing that is that the first thing we're going to do. Is we're going to search for. Do you see. We're going to search. We're going to create this dictionary, right? Things to look for. And then this function here refers to that dictionary. So this is a function that kind of only makes sense inside. Inside here. And then we're going to return this, right? So we should now be able to print. Pics images. Passing in our source and destination. There we go. Great. So let's. Install Gradio. Actually, we've got the latest version by using minus you upgrade. And I haven't used gradio much at all, except when we did that. Lesson. So I've forgotten everything. So I might need some help with this. Yeah. Okay. So import gradio. And I create interface. And the function is fix images. Oh, okay. Okay. Now what's this input thing. Inputs is sketch pad. Outputs is. Oh, I see. We can just say label. Docs. Is there a different kind of label for like a. Large bit of text. It should be like a text box or something like that. Maybe. Yeah. Something area. Text box. Yeah. Okay. Inputs. Wait, and then do we. Okay. So if we pass a string, it's going to construct it. And not like otherwise we construct it manually. Is that how this works? It said that there's a shortcut if you put just text, it would work. I think if you go to the. I think I saw it when you were scrolling. I string short. Oh, text area would have seven lines. I see. I see. I see, which isn't that many. So let's just try to get there away. So import is. That. And output is that. Okay. And they've got that new like. Grid flex boxy thing we might be able to use to like get one under the other because we don't really want them side by side. Do we. Okay, so. So where to. I play to file. Image there is. Here's something called file. File for uploading a generic file. I guess he's probably going to copy and paste it from. Yeah, let's just do it here. Can we still run stuff? We can. It's nice. That's not right. We need two things to pass to fix images. So does that mean we put square bracket here or something or a dictionary. Inputs string component. We're still strings. That's the number of parameters. All right. Okay, so that's our source. That's cool. That's nice. That's your destination. Cool. All right. That's nice. So for. All right, so Gradio needs a script. And so I guess we got a space is first right hugging face faces. And we create a space. Okay. And we call it a. Daniel image fix. Right. It's a Gradio space. You can just create the app file right there if you wanted to. Create the app file. In the UI. I don't know if that might be easier. Okay. How do you say something is there hint create the app.py file right in your browser. Oh, I didn't know that exists. Cool. Yeah, I guess it's kind of like GitHub only. So just yeah, yeah, yeah, absolutely. Okay. So we don't need that stuff. We're going to need that. We're going to need like a requirements.text or something, don't we? Okay. So we commit this does that look right? What is it? Is it a requirements.text we need? What is the thing to get? Yeah, I think so. Yeah, requirements that text. And I think you just need to put fast score. Yes. Okay. It automatically have radio name it. Requi requirements.text containing fast core. I love doing this stuff just through the web GUI. It's just so wonderfully lazy. Okay. Yeah, right. Yeah, I think so. I think so. Just, yeah, it has to build the app. Okay. It says it's done. So refresh. It says building. Here it says, because I think it builds for each commits, then you probably built when you committed the. App.py and then it's building again when you committed. I want to say that I want to say the latest logs, you know. It's got secrets. Yeah. I like the way this stuff's all getting kind of standardized now around this idea of just like some key values to our secrets that you can check in there. Everything looks pretty similar, doesn't it? This is annoying. Okay. Okay. So hopefully that means we've got new logs. We can see else based on already. Oh, that's not very helpful logs is now empty. Great. Can you try rerunning the building process? So like, as you start the space, it says, okay. Or I guess the, I don't know the difference between the factory reboot or the restart. You think your space could use a GPU. What does that mean? Is that a thing? I don't know. Like, I think they provided if you like. Email them or something like that. It's a custom kind of thing. Oh, all right. I don't like emailing people. Case by case basis. Makes me feel like I'm being judged. Okay. So, I think it's a little slow, I guess. Yeah. So I want to ask, how long do you plan to keep this life coding running? Is it just indefinitely? Yeah, I, I've got a plan, actually. Okay. I hope you guys don't think it's too crazy, but. Oh, just one moment. Okay. So, why is it still building? Yes. So, I, hopefully, you know, get the course out in a couple of weeks. So, at that point, I'm thinking of like resetting this as a walkthrough in which, you know, things are actually better organized. And so, I hope you guys can still join. I mean, it will be stuff you're already familiar with at this point, but certainly be helpful to have a nice to me to have familiar faces and people who can help. Maybe that'll be a lot more people because it'll be open to everybody. And over a period of a few weeks, you know, we'll catch up to where we are now as a group. But for the couple of weeks before that, I'm planning to do a complete change, which is to do two weeks of APL. I don't know if you guys are aware of APL, but APL is just about the world's oldest programming language that's still widely used. And it's actually, we talked about notation earlier. It's actually a notation. So, APL was originally developed as a notation, not as a programming language. And at one, Iverson won the Turing Award, which is kind of like the Nobel Prize of Computer Science for it for this paper about it, which has written about 20 years after he created the notation. APL is a show. So the most common, why is this not working? Oh, because they're not using Windows. I have to press that. So the most widely used APL implementation, there's a lot of them, but the most widely used one is called dialogue. And, yeah, it's basically, it's basically meth. Right. Okay. Okay, looks like math. But imagine if you started with math, which itself has been developed over hundreds of years by various people. And then one of the smartest people in the world being Ken Iverson, then took everything from that and combined it with tensor analysis ideas from physics, which have been developed by mainly Albert Einstein and many other people. And then combined that with ideas from computer science. And then have a large group of people continuously work on that from 1963 to 2022. So it's got a 60 years of continuous development. And that gives you APL. And so just to give you a taste, in math, to add up a series, we use capital sigma. Right. And capital sigma means only one thing. It means add up a series. If you want to multiply together a series, you have to use something completely different, which is capital pie. So APL instead has this idea that says you can take a function like plus, and you can modify it, using something that they call an operator. So plus is a function slash is an operator doesn't mean divide divided by means doing. And this operator. What it does is it takes a list. That's a list. Right. And it inserts this between every pair of things in the list. Which is the same as sigma. Right in math. And so here's how to do the same thing as capital pie. Right. So for example, here's so then there's a bunch of other symbols. Right. So for example, a symbol which actually finds a way. So lots and lots of ideas from APL have found their way into other programming languages. One of them is a lot of programming languages have something called aota, which means the same thing as range in Python. So Iota six, it means almost the same thing as range. It's a range plus one, if you like, rather than zero to five is one to six. And this is the this is how sequences and series are defined in math. We in math, we start at one. So if I want to do factorial, right, I could do apply. Times slash, sorry, apply. Times slash to Iota six. So that's going to take one to. So you actually read right to left in APL. So that takes this series here and sticks times between every pair of things in it. So one times two times three times what I'm sorry, ten six. So I'll give you an example of another operator. Backslash is the same as slash. Accept it basically it's cumulative. It shows me the results as I go. So this is one, one times two, one times two times three, one times two times three times four, one times two times two times four times five, one times two times four times five times six. So it's basically, yeah, it's a it's a notation. It's it's, you know, built on mathematical notation. Can you handle compass number as well? Yes, absolutely. Yeah, absolutely. So complex numbers. I written with J complex number and so one of the interesting things about. APL is every function, nearly every function. Maybe every function has both monadic and dyadic forms. The dyadic form means it takes two arguments, one on the left and one on the right. So here are the dyadic versions of plus minus divide in times. But there's also monadic versions. And so for example, so if I wave my mouse over here, these tells me. So the dyadic version of plus is plus obviously the monadic version is conjugate, which is a. Complex number thing. So the conjugate of real number two is two. The conjugate of the real number two, why plus three. Is two minus three. So, yeah, it's, it's, yeah, handles it. It's kind of in some ways a superset of mathematical notation. And so, yeah, it's not just plus minus times divide, but see all these different things at the top. It's all of these as well. Some of which you're recognized like, epsilon, which as you'd expect means membership. As dyadic, but also has a monadic form. That's why, you know, so there's a, it does a lot more things than normal math notation. And so some of them like a really quite interesting. So for example, there's something called up style, which is looks like this. And it returns the maximum of those two things. Now, where that gets interesting is what if we do maximum slash. So, what does that do? Well, that did the maximum of four and three. That's right, maximum of five and four. And then it was the maximum of that and six, and then the maximum of that and four, and then the maximum of that and three. So in other words, it's five up style four up style six up style four up style three, which when you think about it as the maximum of the list. Right. So, I think it's one of things that in normal math notation we have to like invent something in the paper as we go or whatever in a PL. It's this, this kind of like natural extension. So, yeah, so I just, I thought it'd be fun to have a couple of weeks of exploring this. And it's actually very helpful for pie torch, TensorFlow and array and NumPy programmers, because those ideas were in any ways stolen from a PL. So, for example, just like you can do an a PL, a number plus a list. You can do that in a PL, but a PL invented it. Right. And does it in kind of like, often more interesting ways. One of the fun things about a PL is defining functions. Things tend to be a bit more consistent than a lot of other languages. So, in Python, for example, you define a function with like kind of a unique, you know, syntax. In a PL to define a variable. You use arrow. And to find a function, you use a variable as well. It's just that the function goes in curly brackets. And you can pass one thing to the function in which case it'll be called omega, or you can pass two things to a function which is called omega and alpha. So if I wanted to find plus, I would go alpha plus omega. And I would go to the code and say, now, create my own operator. And you can use any Unicode symbol so you can actually build up your own notation. And so it gets kind of pretty interesting because a lot of, like, for example, there's an operator called power, which repeats a function n times. So, for example, you can define exponent literally as repeat power n times. And so then you can, like, come up with your own versions of repeating things a bunch of times in ways which aren't necessarily in math that might be quite helpful. Anyway, so that's my point. People use a PL for nowadays. So, obviously, there's two main areas. So, APL is one of a class of what's called array languages, of which there's three main ones in use, APL, K and J. The array languages are most commonly used in hedge fund trading, which is partly a historical thing. You know, that's where the money is, I guess. And so, you know, that's a group of people who don't care about trends as long as they can make money. And so, you know, I kind of realize this is a really good way of expressing mathematical ideas. They kind of really dived into it. And in particular, Arthur Whitney, who helped create APL and went on to create K. He developed a kind of a extended version of APL called a plus at Morgan Stanley. So, Morgan Stanley did a lot of stuff in a plus. So, nowadays, K, actually, there's a whole database built on K called KDB, which is considered perhaps the fastest database in the world for a lot of things. The whole K implementation is so concise that it fits in the cache on a CPU, which is pretty amazing. Because, as you can imagine, with this kind of expressiveness, you can often write pretty sophisticated programs in one or two lines of code. Yeah, it's also used in kind of like legacy big business stuff because it's been around a long time. You know, but I don't think that's a very interesting use of it. But then, like, it's starting to get popular, I mean, popular, niche popular again, just as like people interested in math and notation. You know, so some of the ideas have made their way into mainstream math. So, for example, something that, you know, pretty much any working mathematician will be familiar with is Iverson brackets. This is a type in Iverson. It says Iverson bracket, right? Which is basically the idea that you can put a Boolean expression and make it one or zero. And once you make ballons, ones and zeros, you can manipulate them in mathematical ways, you know. And so that idea comes from APL. And so, for example, which of these things is greater than the corresponding thing in probably all that's very good. In Iota six, Iota five rather. At least on my end, I cannot. Okay, because you're at the bottom. So the skin is getting a little bit covered by the in zoom. Okay. Yeah. Okay. I see that line. Yeah. Cool. Yeah. So, you know, once you know, once you recognize that you can do things like this, and if you return ones and zeros is the truth values, you could be like, Oh, like how many times was that true. Stuff like that. You know. Yeah. So anyway, so like some of the ideas of made their way into math and coding and stuff like that. So maybe that's kind of main thing it's used for in some ways, but my interest is kind of to look for ideas and things like that. I guess it's kind of useful thing. Yeah, a lot of people, including me who have spent time with the rate programming feel like it's the most mind opening thing they've done in computer science, because it's like going to this alien world where they've spent 60 years going in a different direction. And suddenly realizing like, and a lot of the smartest people who have worked in computer science were on that path, not our path. And it's like, wow, what are they doing doing so like, I actually find it very enjoyable because you end up reading interesting papers from the 60s and 70s and stuff. And it's just like, Oh my God, you know, and so, for example, I don't know if you saw, but Mathematica came out with a new version of Mathematica today. Which is not very helpful. So the latest version of Mathematica, which came out yesterday or the day before, basically says, Oh, we've admitted to this new thing called threaded. Anyway, it actually turns out if you read it, that it's the same thing as what's called the rank conjunction in a PL and J, which has been around for decades. So it's like one of these things where it's like, Oh, you know, ideas of decades old are sometimes only just finding their way into modern languages. Yeah, like Mathematica. So, really, it's a really great way to learn math or part, big parts of math. Yeah, because as you go through it, those six awful lots are out of questions and have complex numbers. So as you go through it, my plan is to kind of go through each glyph. So some of those glyphs are going to be like, Okay, well, this is the conjugate of complex numbers. What on earth does that mean? So, like, you know, really gives you a chance to explore that. And then in particular, the language called J, which was developed by the developer as a PL is a kind of a getting all the best ideas to make PL over the decades and making them better. And then it comes with a whole bunch of, they call them labs, which basically take you through really interesting mathematical ideas like polynomials, you know, all this stuff like using J is the notation. And I prefer that to normal math notation because I already always do exactly what it means, you know, that it has a totally consistent meaning. Yeah, so, yeah, so that's my plan for the next week. And actually I come across PDB before. Oh, yeah, my old boss is working for Morgan Stanley and I think they still have that fee version, maybe I need to take around with the memories less than four gig. And actually have three versions and he, last time we tried to do some IoT application so contact all the different sensor for machinery, and they come by and actually better and performance faster than Panda as well. And then I do all the configuration in KDP and then give me the file and then I start doing the visualization. So, yeah, but he used to told me, pick six months to actually train a person to actually can read it. So you can get this, get us up and one thing cover with them. Yeah, yeah, we'll just get up and running. So I've actually, I, so like, I don't know much a PL at all, to be clear. So this is not like teaching you this is a shared exploration. I've done a little bit of like a little bit of J before, and then two or three weeks ago, reach the point in teaching my daughter and so I teach my daughter and her best friend, math, I tutor them. And we reached the point a few weeks ago where we were up to doing sequences and series, you know, like signal notation. And I started trying to teach them and they had no idea what I was talking about. And I was like, I thought of signal notation is actually extremely easy because like, if you explain it to me, it you just be like, Oh, well, it's like this list comprehension with some on the front, you know, it's like it's a very simple. It's just like, that's exactly what it is. But of course they didn't have any of that kind of idea of indexing or anything so you know, you know, just kind of trying to say like, T n equals T n minus one plus one is a arithmetic sequence, you know, or whatever, you know, or like I equals one to six of I. So just like, what's T n? What's I like what's going on? So then we stopped trying, you know, there's like one failed lesson. And it's like, okay, forget all that. I'm going to teach you a PL and NumPy instead. And so we did like three lessons of a PL and NumPy and then I said, okay. So I was like, oh, that's that thing, Sigma, you know, I equals one to five of I. That's this. That's plus slash Iota five. And they're like, oh, that's all. Okay. You know, or, you know, in NumPy NP, we didn't use NP doc because I use World Card Import. So some a range five plus one. So yeah, so that's why I've been like re engaging or engaging more deeply with a PL. But I think it's beautiful, you know, I think it's just a beautiful. A beautiful notation. And it reminds me in some ways of flex learning Chinese like once I started learning Chinese is like, Oh my god, there's this whole culture of thousands of years. But I'm, you know, I feel like that, but this is so culture of 60 years, you know, there's this whole. And recently I tried to convert things on mathematical formula into Python actually quite info. Yeah. Yeah. Doing some signal processing. Cool. How did our thing. Oh, look, there's a thing here. Please try it and tell me if you find anything broken up within the chat. Oh, why is there an M there? All right. Thanks all. Bye. You're looking forward to. Oh, hey, awesome. Bye.
